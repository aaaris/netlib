{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  function DirectoryExistsPlugin(source, target) {\n    _classCallCheck(this, DirectoryExistsPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(DirectoryExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"DirectoryExistsPlugin\", function (request, resolveContext, callback) {\n        var fs = resolver.fileSystem;\n        var directory = request.path;\n        if (!directory) return callback();\n        fs.stat(directory, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" doesn't exist\");\n            return callback();\n          }\n\n          if (!stat.isDirectory()) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(directory);\n            if (resolveContext.log) resolveContext.log(directory + \" is not a directory\");\n            return callback();\n          }\n\n          if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(directory);\n          resolver.doResolve(target, request, \"existing directory \".concat(directory), resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return DirectoryExistsPlugin;\n}();","map":{"version":3,"names":["module","exports","source","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","fs","fileSystem","directory","path","stat","err","missingDependencies","add","log","isDirectory","fileDependencies","doResolve"],"sources":["D:/Work/Project/LMS/lms/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class DirectoryExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\n\t\t\t\t\"DirectoryExistsPlugin\",\n\t\t\t\t(request, resolveContext, callback) => {\n\t\t\t\t\tconst fs = resolver.fileSystem;\n\t\t\t\t\tconst directory = request.path;\n\t\t\t\t\tif (!directory) return callback();\n\t\t\t\t\tfs.stat(directory, (err, stat) => {\n\t\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" doesn't exist\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\t\tresolveContext.missingDependencies.add(directory);\n\t\t\t\t\t\t\tif (resolveContext.log)\n\t\t\t\t\t\t\t\tresolveContext.log(directory + \" is not a directory\");\n\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\t\tresolveContext.fileDependencies.add(directory);\n\t\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\t`existing directory ${directory}`,\n\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\tcallback\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;AAEAA,MAAM,CAACC,OAAP;EACC;AACD;AACA;AACA;EACC,+BAAYC,MAAZ,EAAoBC,MAApB,EAA4B;IAAA;;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EAbA;IAAA;IAAA,OAcC,eAAMC,QAAN,EAAgB;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;MACAC,QAAQ,CACNE,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAGE,uBAHF,EAIE,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;QACtC,IAAMC,EAAE,GAAGP,QAAQ,CAACQ,UAApB;QACA,IAAMC,SAAS,GAAGL,OAAO,CAACM,IAA1B;QACA,IAAI,CAACD,SAAL,EAAgB,OAAOH,QAAQ,EAAf;QAChBC,EAAE,CAACI,IAAH,CAAQF,SAAR,EAAmB,UAACG,GAAD,EAAMD,IAAN,EAAe;UACjC,IAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;YACjB,IAAIN,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;YACD,IAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,gBAA/B;YACD,OAAOH,QAAQ,EAAf;UACA;;UACD,IAAI,CAACK,IAAI,CAACK,WAAL,EAAL,EAAyB;YACxB,IAAIX,cAAc,CAACQ,mBAAnB,EACCR,cAAc,CAACQ,mBAAf,CAAmCC,GAAnC,CAAuCL,SAAvC;YACD,IAAIJ,cAAc,CAACU,GAAnB,EACCV,cAAc,CAACU,GAAf,CAAmBN,SAAS,GAAG,qBAA/B;YACD,OAAOH,QAAQ,EAAf;UACA;;UACD,IAAID,cAAc,CAACY,gBAAnB,EACCZ,cAAc,CAACY,gBAAf,CAAgCH,GAAhC,CAAoCL,SAApC;UACDT,QAAQ,CAACkB,SAAT,CACCnB,MADD,EAECK,OAFD,+BAGuBK,SAHvB,GAICJ,cAJD,EAKCC,QALD;QAOA,CAxBD;MAyBA,CAjCH;IAmCA;EAnDF;;EAAA;AAAA"},"metadata":{},"sourceType":"script"}