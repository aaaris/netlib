{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/slicedToArray.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.map.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nvar streamChunksOfSourceMap = require(\"./streamChunksOfSourceMap\");\n\nvar splitIntoLines = require(\"./splitIntoLines\");\n\nvar streamChunksOfCombinedSourceMap = function streamChunksOfCombinedSourceMap(source, sourceMap, innerSourceName, innerSource, innerSourceMap, removeInnerSource, onChunk, onSource, onName, finalSource, columns) {\n  var sourceMapping = new Map();\n  var nameMapping = new Map();\n  var sourceIndexMapping = [];\n  var nameIndexMapping = [];\n  var nameIndexValueMapping = [];\n  var innerSourceIndex = -2;\n  var innerSourceIndexMapping = [];\n  var innerSourceIndexValueMapping = [];\n  var innerSourceContents = [];\n  var innerSourceContentLines = [];\n  var innerNameIndexMapping = [];\n  var innerNameIndexValueMapping = [];\n  var innerSourceMapLineData = [];\n\n  var findInnerMapping = function findInnerMapping(line, column) {\n    if (line > innerSourceMapLineData.length) return -1;\n    var mappingsData = innerSourceMapLineData[line - 1].mappingsData;\n    var l = 0;\n    var r = mappingsData.length / 5;\n\n    while (l < r) {\n      var m = l + r >> 1;\n\n      if (mappingsData[m * 5] <= column) {\n        l = m + 1;\n      } else {\n        r = m;\n      }\n    }\n\n    if (l === 0) return -1;\n    return l - 1;\n  };\n\n  return streamChunksOfSourceMap(source, sourceMap, function (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) {\n    // Check if this is a mapping to the inner source\n    if (sourceIndex === innerSourceIndex) {\n      // Check if there is a mapping in the inner source\n      var idx = findInnerMapping(originalLine, originalColumn);\n\n      if (idx !== -1) {\n        var _innerSourceMapLineDa = innerSourceMapLineData[originalLine - 1],\n            chunks = _innerSourceMapLineDa.chunks,\n            mappingsData = _innerSourceMapLineDa.mappingsData;\n        var mi = idx * 5;\n        var _innerSourceIndex = mappingsData[mi + 1];\n        var innerOriginalLine = mappingsData[mi + 2];\n        var innerOriginalColumn = mappingsData[mi + 3];\n        var innerNameIndex = mappingsData[mi + 4];\n\n        if (_innerSourceIndex >= 0) {\n          // Check for an identity mapping\n          // where we are allowed to adjust the original column\n          var innerChunk = chunks[idx];\n          var innerGeneratedColumn = mappingsData[mi];\n          var locationInChunk = originalColumn - innerGeneratedColumn;\n\n          if (locationInChunk > 0) {\n            var originalSourceLines = _innerSourceIndex < innerSourceContentLines.length ? innerSourceContentLines[_innerSourceIndex] : null;\n\n            if (originalSourceLines === undefined) {\n              var originalSource = innerSourceContents[_innerSourceIndex];\n              originalSourceLines = originalSource ? splitIntoLines(originalSource) : null;\n              innerSourceContentLines[_innerSourceIndex] = originalSourceLines;\n            }\n\n            if (originalSourceLines !== null) {\n              var originalChunk = innerOriginalLine <= originalSourceLines.length ? originalSourceLines[innerOriginalLine - 1].slice(innerOriginalColumn, innerOriginalColumn + locationInChunk) : \"\";\n\n              if (innerChunk.slice(0, locationInChunk) === originalChunk) {\n                innerOriginalColumn += locationInChunk;\n                innerNameIndex = -1;\n              }\n            }\n          } // We have a inner mapping to original source\n          // emit source when needed and compute global source index\n\n\n          var _sourceIndex = _innerSourceIndex < innerSourceIndexMapping.length ? innerSourceIndexMapping[_innerSourceIndex] : -2;\n\n          if (_sourceIndex === -2) {\n            var _ref = _innerSourceIndex < innerSourceIndexValueMapping.length ? innerSourceIndexValueMapping[_innerSourceIndex] : [null, undefined],\n                _ref2 = _slicedToArray(_ref, 2),\n                _source = _ref2[0],\n                sourceContent = _ref2[1];\n\n            var globalIndex = sourceMapping.get(_source);\n\n            if (globalIndex === undefined) {\n              sourceMapping.set(_source, globalIndex = sourceMapping.size);\n              onSource(globalIndex, _source, sourceContent);\n            }\n\n            _sourceIndex = globalIndex;\n            innerSourceIndexMapping[_innerSourceIndex] = _sourceIndex;\n          } // emit name when needed and compute global name index\n\n\n          var finalNameIndex = -1;\n\n          if (innerNameIndex >= 0) {\n            // when we have a inner name\n            finalNameIndex = innerNameIndex < innerNameIndexMapping.length ? innerNameIndexMapping[innerNameIndex] : -2;\n\n            if (finalNameIndex === -2) {\n              var name = innerNameIndex < innerNameIndexValueMapping.length ? innerNameIndexValueMapping[innerNameIndex] : undefined;\n\n              if (name) {\n                var _globalIndex = nameMapping.get(name);\n\n                if (_globalIndex === undefined) {\n                  nameMapping.set(name, _globalIndex = nameMapping.size);\n                  onName(_globalIndex, name);\n                }\n\n                finalNameIndex = _globalIndex;\n              } else {\n                finalNameIndex = -1;\n              }\n\n              innerNameIndexMapping[innerNameIndex] = finalNameIndex;\n            }\n          } else if (nameIndex >= 0) {\n            // when we don't have an inner name,\n            // but we have an outer name\n            // it can be used when inner original code equals to the name\n            var _originalSourceLines = innerSourceContentLines[_innerSourceIndex];\n\n            if (_originalSourceLines === undefined) {\n              var _originalSource = innerSourceContents[_innerSourceIndex];\n              _originalSourceLines = _originalSource ? splitIntoLines(_originalSource) : null;\n              innerSourceContentLines[_innerSourceIndex] = _originalSourceLines;\n            }\n\n            if (_originalSourceLines !== null) {\n              var _name = nameIndexValueMapping[nameIndex];\n              var originalName = innerOriginalLine <= _originalSourceLines.length ? _originalSourceLines[innerOriginalLine - 1].slice(innerOriginalColumn, innerOriginalColumn + _name.length) : \"\";\n\n              if (_name === originalName) {\n                finalNameIndex = nameIndex < nameIndexMapping.length ? nameIndexMapping[nameIndex] : -2;\n\n                if (finalNameIndex === -2) {\n                  var _name2 = nameIndexValueMapping[nameIndex];\n\n                  if (_name2) {\n                    var _globalIndex2 = nameMapping.get(_name2);\n\n                    if (_globalIndex2 === undefined) {\n                      nameMapping.set(_name2, _globalIndex2 = nameMapping.size);\n                      onName(_globalIndex2, _name2);\n                    }\n\n                    finalNameIndex = _globalIndex2;\n                  } else {\n                    finalNameIndex = -1;\n                  }\n\n                  nameIndexMapping[nameIndex] = finalNameIndex;\n                }\n              }\n            }\n          }\n\n          onChunk(chunk, generatedLine, generatedColumn, _sourceIndex, innerOriginalLine, innerOriginalColumn, finalNameIndex);\n          return;\n        }\n      } // We have a mapping to the inner source, but no inner mapping\n\n\n      if (removeInnerSource) {\n        onChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n        return;\n      } else {\n        if (sourceIndexMapping[sourceIndex] === -2) {\n          var _globalIndex3 = sourceMapping.get(innerSourceName);\n\n          if (_globalIndex3 === undefined) {\n            sourceMapping.set(source, _globalIndex3 = sourceMapping.size);\n            onSource(_globalIndex3, innerSourceName, innerSource);\n          }\n\n          sourceIndexMapping[sourceIndex] = _globalIndex3;\n        }\n      }\n    }\n\n    var finalSourceIndex = sourceIndex < 0 || sourceIndex >= sourceIndexMapping.length ? -1 : sourceIndexMapping[sourceIndex];\n\n    if (finalSourceIndex < 0) {\n      // no source, so we make it a generated chunk\n      onChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n    } else {\n      // Pass through the chunk with mapping\n      var _finalNameIndex = -1;\n\n      if (nameIndex >= 0 && nameIndex < nameIndexMapping.length) {\n        _finalNameIndex = nameIndexMapping[nameIndex];\n\n        if (_finalNameIndex === -2) {\n          var _name3 = nameIndexValueMapping[nameIndex];\n\n          var _globalIndex4 = nameMapping.get(_name3);\n\n          if (_globalIndex4 === undefined) {\n            nameMapping.set(_name3, _globalIndex4 = nameMapping.size);\n            onName(_globalIndex4, _name3);\n          }\n\n          _finalNameIndex = _globalIndex4;\n          nameIndexMapping[nameIndex] = _finalNameIndex;\n        }\n      }\n\n      onChunk(chunk, generatedLine, generatedColumn, finalSourceIndex, originalLine, originalColumn, _finalNameIndex);\n    }\n  }, function (i, source, sourceContent) {\n    if (source === innerSourceName) {\n      innerSourceIndex = i;\n      if (innerSource !== undefined) sourceContent = innerSource;else innerSource = sourceContent;\n      sourceIndexMapping[i] = -2;\n      streamChunksOfSourceMap(sourceContent, innerSourceMap, function (chunk, generatedLine, generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex) {\n        while (innerSourceMapLineData.length < generatedLine) {\n          innerSourceMapLineData.push({\n            mappingsData: [],\n            chunks: []\n          });\n        }\n\n        var data = innerSourceMapLineData[generatedLine - 1];\n        data.mappingsData.push(generatedColumn, sourceIndex, originalLine, originalColumn, nameIndex);\n        data.chunks.push(chunk);\n      }, function (i, source, sourceContent) {\n        innerSourceContents[i] = sourceContent;\n        innerSourceContentLines[i] = undefined;\n        innerSourceIndexMapping[i] = -2;\n        innerSourceIndexValueMapping[i] = [source, sourceContent];\n      }, function (i, name) {\n        innerNameIndexMapping[i] = -2;\n        innerNameIndexValueMapping[i] = name;\n      }, false, columns);\n    } else {\n      var globalIndex = sourceMapping.get(source);\n\n      if (globalIndex === undefined) {\n        sourceMapping.set(source, globalIndex = sourceMapping.size);\n        onSource(globalIndex, source, sourceContent);\n      }\n\n      sourceIndexMapping[i] = globalIndex;\n    }\n  }, function (i, name) {\n    nameIndexMapping[i] = -2;\n    nameIndexValueMapping[i] = name;\n  }, finalSource, columns);\n};\n\nmodule.exports = streamChunksOfCombinedSourceMap;","map":{"version":3,"names":["streamChunksOfSourceMap","require","splitIntoLines","streamChunksOfCombinedSourceMap","source","sourceMap","innerSourceName","innerSource","innerSourceMap","removeInnerSource","onChunk","onSource","onName","finalSource","columns","sourceMapping","Map","nameMapping","sourceIndexMapping","nameIndexMapping","nameIndexValueMapping","innerSourceIndex","innerSourceIndexMapping","innerSourceIndexValueMapping","innerSourceContents","innerSourceContentLines","innerNameIndexMapping","innerNameIndexValueMapping","innerSourceMapLineData","findInnerMapping","line","column","length","mappingsData","l","r","m","chunk","generatedLine","generatedColumn","sourceIndex","originalLine","originalColumn","nameIndex","idx","chunks","mi","innerOriginalLine","innerOriginalColumn","innerNameIndex","innerChunk","innerGeneratedColumn","locationInChunk","originalSourceLines","undefined","originalSource","originalChunk","slice","sourceContent","globalIndex","get","set","size","finalNameIndex","name","originalName","finalSourceIndex","i","push","data","module","exports"],"sources":["D:/Work/Project/LMS/lms/node_modules/webpack-sources/lib/helpers/streamChunksOfCombinedSourceMap.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst streamChunksOfSourceMap = require(\"./streamChunksOfSourceMap\");\nconst splitIntoLines = require(\"./splitIntoLines\");\n\nconst streamChunksOfCombinedSourceMap = (\n\tsource,\n\tsourceMap,\n\tinnerSourceName,\n\tinnerSource,\n\tinnerSourceMap,\n\tremoveInnerSource,\n\tonChunk,\n\tonSource,\n\tonName,\n\tfinalSource,\n\tcolumns\n) => {\n\tlet sourceMapping = new Map();\n\tlet nameMapping = new Map();\n\tconst sourceIndexMapping = [];\n\tconst nameIndexMapping = [];\n\tconst nameIndexValueMapping = [];\n\tlet innerSourceIndex = -2;\n\tconst innerSourceIndexMapping = [];\n\tconst innerSourceIndexValueMapping = [];\n\tconst innerSourceContents = [];\n\tconst innerSourceContentLines = [];\n\tconst innerNameIndexMapping = [];\n\tconst innerNameIndexValueMapping = [];\n\tconst innerSourceMapLineData = [];\n\tconst findInnerMapping = (line, column) => {\n\t\tif (line > innerSourceMapLineData.length) return -1;\n\t\tconst { mappingsData } = innerSourceMapLineData[line - 1];\n\t\tlet l = 0;\n\t\tlet r = mappingsData.length / 5;\n\t\twhile (l < r) {\n\t\t\tlet m = (l + r) >> 1;\n\t\t\tif (mappingsData[m * 5] <= column) {\n\t\t\t\tl = m + 1;\n\t\t\t} else {\n\t\t\t\tr = m;\n\t\t\t}\n\t\t}\n\t\tif (l === 0) return -1;\n\t\treturn l - 1;\n\t};\n\treturn streamChunksOfSourceMap(\n\t\tsource,\n\t\tsourceMap,\n\t\t(\n\t\t\tchunk,\n\t\t\tgeneratedLine,\n\t\t\tgeneratedColumn,\n\t\t\tsourceIndex,\n\t\t\toriginalLine,\n\t\t\toriginalColumn,\n\t\t\tnameIndex\n\t\t) => {\n\t\t\t// Check if this is a mapping to the inner source\n\t\t\tif (sourceIndex === innerSourceIndex) {\n\t\t\t\t// Check if there is a mapping in the inner source\n\t\t\t\tconst idx = findInnerMapping(originalLine, originalColumn);\n\t\t\t\tif (idx !== -1) {\n\t\t\t\t\tconst { chunks, mappingsData } = innerSourceMapLineData[\n\t\t\t\t\t\toriginalLine - 1\n\t\t\t\t\t];\n\t\t\t\t\tconst mi = idx * 5;\n\t\t\t\t\tconst innerSourceIndex = mappingsData[mi + 1];\n\t\t\t\t\tconst innerOriginalLine = mappingsData[mi + 2];\n\t\t\t\t\tlet innerOriginalColumn = mappingsData[mi + 3];\n\t\t\t\t\tlet innerNameIndex = mappingsData[mi + 4];\n\t\t\t\t\tif (innerSourceIndex >= 0) {\n\t\t\t\t\t\t// Check for an identity mapping\n\t\t\t\t\t\t// where we are allowed to adjust the original column\n\t\t\t\t\t\tconst innerChunk = chunks[idx];\n\t\t\t\t\t\tconst innerGeneratedColumn = mappingsData[mi];\n\t\t\t\t\t\tconst locationInChunk = originalColumn - innerGeneratedColumn;\n\t\t\t\t\t\tif (locationInChunk > 0) {\n\t\t\t\t\t\t\tlet originalSourceLines =\n\t\t\t\t\t\t\t\tinnerSourceIndex < innerSourceContentLines.length\n\t\t\t\t\t\t\t\t\t? innerSourceContentLines[innerSourceIndex]\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\tif (originalSourceLines === undefined) {\n\t\t\t\t\t\t\t\tconst originalSource = innerSourceContents[innerSourceIndex];\n\t\t\t\t\t\t\t\toriginalSourceLines = originalSource\n\t\t\t\t\t\t\t\t\t? splitIntoLines(originalSource)\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex] = originalSourceLines;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (originalSourceLines !== null) {\n\t\t\t\t\t\t\t\tconst originalChunk =\n\t\t\t\t\t\t\t\t\tinnerOriginalLine <= originalSourceLines.length\n\t\t\t\t\t\t\t\t\t\t? originalSourceLines[innerOriginalLine - 1].slice(\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn + locationInChunk\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\t\t\t\tif (innerChunk.slice(0, locationInChunk) === originalChunk) {\n\t\t\t\t\t\t\t\t\tinnerOriginalColumn += locationInChunk;\n\t\t\t\t\t\t\t\t\tinnerNameIndex = -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// We have a inner mapping to original source\n\n\t\t\t\t\t\t// emit source when needed and compute global source index\n\t\t\t\t\t\tlet sourceIndex =\n\t\t\t\t\t\t\tinnerSourceIndex < innerSourceIndexMapping.length\n\t\t\t\t\t\t\t\t? innerSourceIndexMapping[innerSourceIndex]\n\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\tif (sourceIndex === -2) {\n\t\t\t\t\t\t\tconst [source, sourceContent] =\n\t\t\t\t\t\t\t\tinnerSourceIndex < innerSourceIndexValueMapping.length\n\t\t\t\t\t\t\t\t\t? innerSourceIndexValueMapping[innerSourceIndex]\n\t\t\t\t\t\t\t\t\t: [null, undefined];\n\t\t\t\t\t\t\tlet globalIndex = sourceMapping.get(source);\n\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\t\t\t\tonSource(globalIndex, source, sourceContent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tsourceIndex = globalIndex;\n\t\t\t\t\t\t\tinnerSourceIndexMapping[innerSourceIndex] = sourceIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// emit name when needed and compute global name index\n\t\t\t\t\t\tlet finalNameIndex = -1;\n\t\t\t\t\t\tif (innerNameIndex >= 0) {\n\t\t\t\t\t\t\t// when we have a inner name\n\t\t\t\t\t\t\tfinalNameIndex =\n\t\t\t\t\t\t\t\tinnerNameIndex < innerNameIndexMapping.length\n\t\t\t\t\t\t\t\t\t? innerNameIndexMapping[innerNameIndex]\n\t\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\t\t\tconst name =\n\t\t\t\t\t\t\t\t\tinnerNameIndex < innerNameIndexValueMapping.length\n\t\t\t\t\t\t\t\t\t\t? innerNameIndexValueMapping[innerNameIndex]\n\t\t\t\t\t\t\t\t\t\t: undefined;\n\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tfinalNameIndex = -1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tinnerNameIndexMapping[innerNameIndex] = finalNameIndex;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (nameIndex >= 0) {\n\t\t\t\t\t\t\t// when we don't have an inner name,\n\t\t\t\t\t\t\t// but we have an outer name\n\t\t\t\t\t\t\t// it can be used when inner original code equals to the name\n\t\t\t\t\t\t\tlet originalSourceLines =\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex];\n\t\t\t\t\t\t\tif (originalSourceLines === undefined) {\n\t\t\t\t\t\t\t\tconst originalSource = innerSourceContents[innerSourceIndex];\n\t\t\t\t\t\t\t\toriginalSourceLines = originalSource\n\t\t\t\t\t\t\t\t\t? splitIntoLines(originalSource)\n\t\t\t\t\t\t\t\t\t: null;\n\t\t\t\t\t\t\t\tinnerSourceContentLines[innerSourceIndex] = originalSourceLines;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (originalSourceLines !== null) {\n\t\t\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\t\t\tconst originalName =\n\t\t\t\t\t\t\t\t\tinnerOriginalLine <= originalSourceLines.length\n\t\t\t\t\t\t\t\t\t\t? originalSourceLines[innerOriginalLine - 1].slice(\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\t\t\t\t\t\tinnerOriginalColumn + name.length\n\t\t\t\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t\t\t\t: \"\";\n\t\t\t\t\t\t\t\tif (name === originalName) {\n\t\t\t\t\t\t\t\t\tfinalNameIndex =\n\t\t\t\t\t\t\t\t\t\tnameIndex < nameIndexMapping.length\n\t\t\t\t\t\t\t\t\t\t\t? nameIndexMapping[nameIndex]\n\t\t\t\t\t\t\t\t\t\t\t: -2;\n\t\t\t\t\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\t\t\t\t\tif (name) {\n\t\t\t\t\t\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tfinalNameIndex = -1;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tnameIndexMapping[nameIndex] = finalNameIndex;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonChunk(\n\t\t\t\t\t\t\tchunk,\n\t\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\tinnerOriginalLine,\n\t\t\t\t\t\t\tinnerOriginalColumn,\n\t\t\t\t\t\t\tfinalNameIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// We have a mapping to the inner source, but no inner mapping\n\t\t\t\tif (removeInnerSource) {\n\t\t\t\t\tonChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (sourceIndexMapping[sourceIndex] === -2) {\n\t\t\t\t\t\tlet globalIndex = sourceMapping.get(innerSourceName);\n\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\t\t\tonSource(globalIndex, innerSourceName, innerSource);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsourceIndexMapping[sourceIndex] = globalIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst finalSourceIndex =\n\t\t\t\tsourceIndex < 0 || sourceIndex >= sourceIndexMapping.length\n\t\t\t\t\t? -1\n\t\t\t\t\t: sourceIndexMapping[sourceIndex];\n\t\t\tif (finalSourceIndex < 0) {\n\t\t\t\t// no source, so we make it a generated chunk\n\t\t\t\tonChunk(chunk, generatedLine, generatedColumn, -1, -1, -1, -1);\n\t\t\t} else {\n\t\t\t\t// Pass through the chunk with mapping\n\t\t\t\tlet finalNameIndex = -1;\n\t\t\t\tif (nameIndex >= 0 && nameIndex < nameIndexMapping.length) {\n\t\t\t\t\tfinalNameIndex = nameIndexMapping[nameIndex];\n\t\t\t\t\tif (finalNameIndex === -2) {\n\t\t\t\t\t\tconst name = nameIndexValueMapping[nameIndex];\n\t\t\t\t\t\tlet globalIndex = nameMapping.get(name);\n\t\t\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\t\t\tnameMapping.set(name, (globalIndex = nameMapping.size));\n\t\t\t\t\t\t\tonName(globalIndex, name);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfinalNameIndex = globalIndex;\n\t\t\t\t\t\tnameIndexMapping[nameIndex] = finalNameIndex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tonChunk(\n\t\t\t\t\tchunk,\n\t\t\t\t\tgeneratedLine,\n\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\tfinalSourceIndex,\n\t\t\t\t\toriginalLine,\n\t\t\t\t\toriginalColumn,\n\t\t\t\t\tfinalNameIndex\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t\t(i, source, sourceContent) => {\n\t\t\tif (source === innerSourceName) {\n\t\t\t\tinnerSourceIndex = i;\n\t\t\t\tif (innerSource !== undefined) sourceContent = innerSource;\n\t\t\t\telse innerSource = sourceContent;\n\t\t\t\tsourceIndexMapping[i] = -2;\n\t\t\t\tstreamChunksOfSourceMap(\n\t\t\t\t\tsourceContent,\n\t\t\t\t\tinnerSourceMap,\n\t\t\t\t\t(\n\t\t\t\t\t\tchunk,\n\t\t\t\t\t\tgeneratedLine,\n\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\toriginalLine,\n\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\tnameIndex\n\t\t\t\t\t) => {\n\t\t\t\t\t\twhile (innerSourceMapLineData.length < generatedLine) {\n\t\t\t\t\t\t\tinnerSourceMapLineData.push({\n\t\t\t\t\t\t\t\tmappingsData: [],\n\t\t\t\t\t\t\t\tchunks: []\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst data = innerSourceMapLineData[generatedLine - 1];\n\t\t\t\t\t\tdata.mappingsData.push(\n\t\t\t\t\t\t\tgeneratedColumn,\n\t\t\t\t\t\t\tsourceIndex,\n\t\t\t\t\t\t\toriginalLine,\n\t\t\t\t\t\t\toriginalColumn,\n\t\t\t\t\t\t\tnameIndex\n\t\t\t\t\t\t);\n\t\t\t\t\t\tdata.chunks.push(chunk);\n\t\t\t\t\t},\n\t\t\t\t\t(i, source, sourceContent) => {\n\t\t\t\t\t\tinnerSourceContents[i] = sourceContent;\n\t\t\t\t\t\tinnerSourceContentLines[i] = undefined;\n\t\t\t\t\t\tinnerSourceIndexMapping[i] = -2;\n\t\t\t\t\t\tinnerSourceIndexValueMapping[i] = [source, sourceContent];\n\t\t\t\t\t},\n\t\t\t\t\t(i, name) => {\n\t\t\t\t\t\tinnerNameIndexMapping[i] = -2;\n\t\t\t\t\t\tinnerNameIndexValueMapping[i] = name;\n\t\t\t\t\t},\n\t\t\t\t\tfalse,\n\t\t\t\t\tcolumns\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tlet globalIndex = sourceMapping.get(source);\n\t\t\t\tif (globalIndex === undefined) {\n\t\t\t\t\tsourceMapping.set(source, (globalIndex = sourceMapping.size));\n\t\t\t\t\tonSource(globalIndex, source, sourceContent);\n\t\t\t\t}\n\t\t\t\tsourceIndexMapping[i] = globalIndex;\n\t\t\t}\n\t\t},\n\t\t(i, name) => {\n\t\t\tnameIndexMapping[i] = -2;\n\t\t\tnameIndexValueMapping[i] = name;\n\t\t},\n\t\tfinalSource,\n\t\tcolumns\n\t);\n};\n\nmodule.exports = streamChunksOfCombinedSourceMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}