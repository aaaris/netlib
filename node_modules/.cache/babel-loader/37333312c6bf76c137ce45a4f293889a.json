{"ast":null,"code":"import _asyncToGenerator from \"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.json.stringify.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      //登录表单的数据绑定对象\n      loginForm: {\n        userId: \"\",\n        password: \"\"\n      },\n      // 表单的验证规则对象\n      loginFormRules: {\n        //验证用户名是否合法\n        userId: [{\n          required: true,\n          message: \"请输入登录账号名\",\n          trigger: \"blur\"\n        }, {\n          min: 3,\n          max: 10,\n          message: \"长度在 3 到 10 个字符\",\n          trigger: \"blur\"\n        }],\n        password: [{\n          required: true,\n          message: \"请输入登录密码\",\n          trigger: \"blur\"\n        }, {\n          min: 6,\n          max: 15,\n          message: \"长度在 6 到 15 个字符\",\n          trigger: \"blur\"\n        }]\n      }\n    };\n  },\n  methods: {\n    // 登录\n    login: function login() {\n      var _this = this;\n\n      this.$refs.loginFormRef.validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(valid) {\n          var targetURL, _yield$_this$$http, res, _yield$_this$$http$ge, res2;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (valid) {\n                    _context.next = 2;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\");\n\n                case 2:\n                  // 发送登录\n                  targetURL = \"?userid=\" + _this.loginForm.userId + \"&password=\" + _this.loginForm.password;\n                  _context.next = 5;\n                  return _this.$http({\n                    method: \"get\",\n                    url: \"/user\" + targetURL\n                  });\n\n                case 5:\n                  _yield$_this$$http = _context.sent;\n                  res = _yield$_this$$http.data;\n\n                  if (!(res.code != 200)) {\n                    _context.next = 9;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this.$message.error(\"登录失败! \" + res.data));\n\n                case 9:\n                  //将登录成功之后的token，保存到客户端的sessionStorage中\n                  _this.$store.commit(\"setToken\", res.data.access_token);\n\n                  _this.$message.success({\n                    message: \"登录成功\"\n                  }); // 拉取用户信息\n\n\n                  _context.next = 13;\n                  return _this.$http.get(\"/user/\" + _this.loginForm.userId + \"?access_token=\" + res.data.access_token);\n\n                case 13:\n                  _yield$_this$$http$ge = _context.sent;\n                  res2 = _yield$_this$$http$ge.data;\n\n                  if (!(res2.code != 200)) {\n                    _context.next = 17;\n                    break;\n                  }\n\n                  return _context.abrupt(\"return\", _this.$message.error(\"拉取用户信息失败！\" + res2.data));\n\n                case 17:\n                  // 将用户信息保存到store,localStorage中\n                  _this.$store.commit(\"setUserInfo\", JSON.stringify(res2.data)); // 跳转到后台主页\n\n\n                  _this.$router.push(\"/home\");\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 重置登录表单\n    resetLoginForm: function resetLoginForm() {\n      this.$refs.loginFormRef.resetFields();\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA;EACAA,IADA,kBACA;IACA;MACA;MACAC;QACAC,UADA;QAEAC;MAFA,CAFA;MAMA;MACAC;QACA;QACAF,SACA;UAAAG;UAAAC;UAAAC;QAAA,CADA,EAEA;UACAC,MADA;UAEAC,OAFA;UAGAH,yBAHA;UAIAC;QAJA,CAFA,CAFA;QAWAJ,WACA;UAAAE;UAAAC;UAAAC;QAAA,CADA,EAEA;UACAC,MADA;UAEAC,OAFA;UAGAH,yBAHA;UAIAC;QAJA,CAFA;MAXA;IAPA;EA6BA,CA/BA;EAgCAG;IACA;IACAC,KAFA,mBAEA;MAAA;;MACA;QAAA;UAAA;;UAAA;YAAA;cAAA;gBAAA;kBAAA,IACAC,KADA;oBAAA;oBAAA;kBAAA;;kBAAA;;gBAAA;kBAEA;kBACAC,SAHA,GAIA,aACA,sBADA,GAEA,YAFA,GAGA,wBAPA;kBAAA;kBAAA,OAQA;oBACAC,aADA;oBAEAC;kBAFA,EARA;;gBAAA;kBAAA;kBAQAC,GARA,sBAQAhB,IARA;;kBAAA,MAYAgB,eAZA;oBAAA;oBAAA;kBAAA;;kBAAA,iCAaA,yCAbA;;gBAAA;kBAcA;kBACA;;kBACA;oBACAV;kBADA,GAhBA,CAmBA;;;kBAnBA;kBAAA,OAoBA,gBACA,WACA,sBADA,GAEA,gBAFA,GAGAU,qBAJA,CApBA;;gBAAA;kBAAA;kBAoBAC,IApBA,yBAoBAjB,IApBA;;kBAAA,MA0BAiB,gBA1BA;oBAAA;oBAAA;kBAAA;;kBAAA,iCA2BA,6CA3BA;;gBAAA;kBA4BA;kBACA,8DA7BA,CA8BA;;;kBACA;;gBA/BA;gBAAA;kBAAA;cAAA;YAAA;UAAA;QAAA;;QAAA;UAAA;QAAA;MAAA;IAiCA,CApCA;IAqCA;IACAC,cAtCA,4BAsCA;MACA;IACA;EAxCA;AAhCA","names":["data","loginForm","userId","password","loginFormRules","required","message","trigger","min","max","methods","login","valid","targetURL","method","url","res","res2","resetLoginForm"],"sourceRoot":"src/components/user","sources":["Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"login_container\">\r\n    <!-- 登录盒子 -->\r\n    <div class=\"login_box\">\r\n      <img class=\"logo_img\" src=\"../../../public/logo.png\" alt=\"\" />\r\n      <!-- 登录表单区域 -->\r\n      <el-form\r\n        ref=\"loginFormRef\"\r\n        :model=\"loginForm\"\r\n        :rules=\"loginFormRules\"\r\n        class=\"login_form\"\r\n      >\r\n        <!-- accout -->\r\n        <el-form-item prop=\"userId\">\r\n          <el-input\r\n            v-model=\"loginForm.userId\"\r\n            prefix-icon=\"el-icon-user-solid\"\r\n            placeholder=\"user accout\"\r\n          >\r\n          </el-input>\r\n        </el-form-item>\r\n        <!-- password -->\r\n        <el-form-item prop=\"password\">\r\n          <el-input\r\n            type=\"password\"\r\n            v-model=\"loginForm.password\"\r\n            prefix-icon=\"el-icon-lock\"\r\n            placeholder=\"password\"\r\n          >\r\n          </el-input>\r\n        </el-form-item>\r\n        <!-- 按钮 -->\r\n        <el-form-item class=\"btns\">\r\n          <a class=\"a_register\" href=\"/regist\">没有账号？点击注册</a>\r\n          <el-button type=\"primary\" @click=\"login\">登录</el-button>\r\n          <el-button type=\"info\" @click=\"resetLoginForm\">重置</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      //登录表单的数据绑定对象\r\n      loginForm: {\r\n        userId: \"\",\r\n        password: \"\",\r\n      },\r\n      // 表单的验证规则对象\r\n      loginFormRules: {\r\n        //验证用户名是否合法\r\n        userId: [\r\n          { required: true, message: \"请输入登录账号名\", trigger: \"blur\" },\r\n          {\r\n            min: 3,\r\n            max: 10,\r\n            message: \"长度在 3 到 10 个字符\",\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n        password: [\r\n          { required: true, message: \"请输入登录密码\", trigger: \"blur\" },\r\n          {\r\n            min: 6,\r\n            max: 15,\r\n            message: \"长度在 6 到 15 个字符\",\r\n            trigger: \"blur\",\r\n          },\r\n        ],\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    // 登录\r\n    login() {\r\n      this.$refs.loginFormRef.validate(async (valid) => {\r\n        if (!valid) return;\r\n        // 发送登录\r\n        var targetURL =\r\n          \"?userid=\" +\r\n          this.loginForm.userId +\r\n          \"&password=\" +\r\n          this.loginForm.password;\r\n        const { data: res } = await this.$http({\r\n          method: \"get\",\r\n          url: \"/user\" + targetURL,\r\n        });\r\n        if (res.code != 200)\r\n          return this.$message.error(\"登录失败! \" + res.data);\r\n        //将登录成功之后的token，保存到客户端的sessionStorage中\r\n        this.$store.commit(\"setToken\", res.data.access_token);\r\n        this.$message.success({\r\n          message: \"登录成功\",\r\n        });\r\n        // 拉取用户信息\r\n        const { data: res2 } = await this.$http.get(\r\n          \"/user/\" +\r\n            this.loginForm.userId +\r\n            \"?access_token=\" +\r\n            res.data.access_token\r\n        );\r\n        if (res2.code != 200)\r\n          return this.$message.error(\"拉取用户信息失败！\" + res2.data);\r\n        // 将用户信息保存到store,localStorage中\r\n        this.$store.commit(\"setUserInfo\", JSON.stringify(res2.data));\r\n        // 跳转到后台主页\r\n        this.$router.push(\"/home\");\r\n      });\r\n    },\r\n    // 重置登录表单\r\n    resetLoginForm() {\r\n      this.$refs.loginFormRef.resetFields();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n// 登录body容器\r\n.login_container {\r\n  height: 100%;\r\n  background-image: url(\"../../../public/bg.jpg\");\r\n  background-size: 100% 100%;\r\n}\r\n\r\n// 登录盒子\r\n.login_box {\r\n  text-align: center;\r\n  width: 500px;\r\n  height: 400px;\r\n  padding-top: 15px;\r\n  background-color: rgba(255, 255, 255, 0.95);\r\n  border-radius: 3px;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  img {\r\n    height: 100px;\r\n  }\r\n}\r\n\r\n// 登录表单区域\r\n.login_form {\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  padding: 28px 20px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n// 按钮区域\r\n.btns {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n}\r\n\r\n// 注册超链接\r\n.a_register {\r\n  margin: auto;\r\n  text-decoration: none;\r\n  color: blue;\r\n  margin-right: 150px;\r\n}\r\n\r\n// 移动端适配\r\n@media (max-width: 600px) {\r\n  .login_box {\r\n    width: 95%;\r\n  }\r\n  .login_form {\r\n    bottom: 30px;\r\n  }\r\n  .a_register {\r\n    margin-right: 20px;\r\n    font-size: 16px;\r\n  }\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}