{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nvar basename = require(\"./getPaths\").basename;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  function CloneBasenamePlugin(source, target) {\n    _classCallCheck(this, CloneBasenamePlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(CloneBasenamePlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      resolver.getHook(this.source).tapAsync(\"CloneBasenamePlugin\", function (request, resolveContext, callback) {\n        var filename = basename(request.path);\n        var filePath = resolver.join(request.path, filename);\n\n        var obj = _objectSpread(_objectSpread({}, request), {}, {\n          path: filePath,\n          relativePath: request.relativePath && resolver.join(request.relativePath, filename)\n        });\n\n        resolver.doResolve(target, obj, \"using path: \" + filePath, resolveContext, callback);\n      });\n    }\n  }]);\n\n  return CloneBasenamePlugin;\n}();","map":{"version":3,"names":["basename","require","module","exports","source","target","resolver","ensureHook","getHook","tapAsync","request","resolveContext","callback","filename","path","filePath","join","obj","relativePath","doResolve"],"sources":["D:/Work/Project/LMS/lms/node_modules/enhanced-resolve/lib/CloneBasenamePlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst basename = require(\"./getPaths\").basename;\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n\nmodule.exports = class CloneBasenamePlugin {\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"CloneBasenamePlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst filename = basename(request.path);\n\t\t\t\tconst filePath = resolver.join(request.path, filename);\n\t\t\t\tconst obj = {\n\t\t\t\t\t...request,\n\t\t\t\t\tpath: filePath,\n\t\t\t\t\trelativePath:\n\t\t\t\t\t\trequest.relativePath &&\n\t\t\t\t\t\tresolver.join(request.relativePath, filename)\n\t\t\t\t};\n\t\t\t\tresolver.doResolve(\n\t\t\t\t\ttarget,\n\t\t\t\t\tobj,\n\t\t\t\t\t\"using path: \" + filePath,\n\t\t\t\t\tresolveContext,\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;;;;;;;;;;AAEA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAP,CAAsBD,QAAvC;AAEA;;;AAEAE,MAAM,CAACC,OAAP;EACC,6BAAYC,MAAZ,EAAoBC,MAApB,EAA4B;IAAA;;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EATA;IAAA;IAAA,OAUC,eAAMC,QAAN,EAAgB;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;MACAC,QAAQ,CACNE,OADF,CACU,KAAKJ,MADf,EAEEK,QAFF,CAEW,qBAFX,EAEkC,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;QACvE,IAAMC,QAAQ,GAAGb,QAAQ,CAACU,OAAO,CAACI,IAAT,CAAzB;QACA,IAAMC,QAAQ,GAAGT,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACI,IAAtB,EAA4BD,QAA5B,CAAjB;;QACA,IAAMI,GAAG,mCACLP,OADK;UAERI,IAAI,EAAEC,QAFE;UAGRG,YAAY,EACXR,OAAO,CAACQ,YAAR,IACAZ,QAAQ,CAACU,IAAT,CAAcN,OAAO,CAACQ,YAAtB,EAAoCL,QAApC;QALO,EAAT;;QAOAP,QAAQ,CAACa,SAAT,CACCd,MADD,EAECY,GAFD,EAGC,iBAAiBF,QAHlB,EAICJ,cAJD,EAKCC,QALD;MAOA,CAnBF;IAoBA;EAhCF;;EAAA;AAAA"},"metadata":{},"sourceType":"script"}