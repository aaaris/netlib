{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/toConsumableArray.js\")[\"default\"];\n\nvar _toArray = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/toArray.js\")[\"default\"];\n\nvar _slicedToArray = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/slicedToArray.js\")[\"default\"];\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nvar _assertThisInitialized = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/assertThisInitialized.js\")[\"default\"];\n\nvar _inherits = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/inherits.js\")[\"default\"];\n\nvar _createSuper = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createSuper.js\")[\"default\"];\n\nvar _wrapNativeSuper = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/wrapNativeSuper.js\")[\"default\"];\n\nvar _typeof = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/typeof.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.array.reduce.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.array.filter.js\");\n\nrequire(\"core-js/modules/es.array.index-of.js\");\n\nrequire(\"core-js/modules/es.array.every.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.array.is-array.js\");\n\nrequire(\"core-js/modules/es.array.map.js\");\n\nrequire(\"core-js/modules/es.array.reverse.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.regexp.test.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.string.match.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.error.to-string.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.array.includes.js\");\n\nrequire(\"core-js/modules/es.string.includes.js\");\n\nrequire(\"core-js/modules/es.json.stringify.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.set.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nrequire(\"core-js/modules/es.array.for-each.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.symbol.js\");\n\nrequire(\"core-js/modules/es.symbol.description.js\");\n\nrequire(\"core-js/modules/es.string.link.js\");\n\nrequire(\"core-js/modules/es.string.trim.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _require = require(\"./util/hints\"),\n    stringHints = _require.stringHints,\n    numberHints = _require.numberHints;\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nvar SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  \"if\": 1,\n  \"enum\": 1,\n  \"const\": 1,\n  \"instanceof\": 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  var evaluatedMax = array.reduce(function (max, item) {\n    return Math.max(max, fn(item));\n  }, 0);\n  return array.filter(function (item) {\n    return fn(item) === evaluatedMax;\n  });\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  var newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return error.dataPath ? error.dataPath.length : 0;\n  });\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  function (error) {\n    return SPECIFICITY[\n    /** @type {keyof typeof SPECIFICITY} */\n    error.keyword] || 2;\n  });\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  var i = children.length - 1;\n\n  var predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  function predicate(schemaPath) {\n    return children[i].schemaPath.indexOf(schemaPath) !== 0;\n  };\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      var refs = extractRefs(children[i]);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  var schema = error.schema;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(function (_ref) {\n    var $ref = _ref.$ref;\n    return $ref;\n  }).filter(function (s) {\n    return s;\n  });\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  var result = [];\n  var i = children.length - 1;\n\n  while (i > 0) {\n    var child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      var refs = extractRefs(child);\n      var childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, \"\\n\".concat(prefix));\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  var typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return _typeof(maybeObj) === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? \"(\".concat(hints.join(\", \"), \")\") : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nvar ValidationError = /*#__PURE__*/function (_Error) {\n  _inherits(ValidationError, _Error);\n\n  var _super = _createSuper(ValidationError);\n\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  function ValidationError(errors, schema) {\n    var _this;\n\n    var configuration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    _classCallCheck(this, ValidationError);\n\n    _this = _super.call(this);\n    /** @type {string} */\n\n    _this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    _this.errors = errors;\n    /** @type {Schema} */\n\n    _this.schema = schema;\n    var headerNameFromSchema;\n    var baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      var splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          var _splittedTitleFromSch = _slicedToArray(splittedTitleFromSchema, 2);\n\n          headerNameFromSchema = _splittedTitleFromSch[1];\n        }\n\n        if (!configuration.baseDataPath) {\n          var _splittedTitleFromSch2 = _slicedToArray(splittedTitleFromSchema, 3);\n\n          baseDataPathFromSchema = _splittedTitleFromSch2[2];\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    _this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    _this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    _this.postFormatter = configuration.postFormatter || null;\n    var header = \"Invalid \".concat(_this.baseDataPath, \" object. \").concat(_this.headerName, \" has been initialized using \").concat(getArticle(_this.baseDataPath), \" \").concat(_this.baseDataPath, \" object that does not match the API schema.\\n\");\n    /** @type {string} */\n\n    _this.message = \"\".concat(header).concat(_this.formatValidationErrors(errors));\n    Error.captureStackTrace(_assertThisInitialized(_this), _this.constructor);\n    return _this;\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  _createClass(ValidationError, [{\n    key: \"getSchemaPart\",\n    value: function getSchemaPart(path) {\n      var newPath = path.split(\"/\");\n      var schemaPart = this.schema;\n\n      for (var i = 1; i < newPath.length; i++) {\n        var inner = schemaPart[\n        /** @type {keyof Schema} */\n        newPath[i]];\n\n        if (!inner) {\n          break;\n        }\n\n        schemaPart = inner;\n      }\n\n      return schemaPart;\n    }\n    /**\n     * @param {Schema} schema\n     * @param {boolean} logic\n     * @param {Array<Object>} prevSchemas\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatSchema\",\n    value: function formatSchema(schema) {\n      var _this2 = this;\n\n      var logic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var prevSchemas = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      var newLogic = logic;\n\n      var formatInnerSchema =\n      /**\n       *\n       * @param {Object} innerSchema\n       * @param {boolean=} addSelf\n       * @returns {string}\n       */\n      function formatInnerSchema(innerSchema, addSelf) {\n        if (!addSelf) {\n          return _this2.formatSchema(innerSchema, newLogic, prevSchemas);\n        }\n\n        if (prevSchemas.includes(innerSchema)) {\n          return \"(recursive)\";\n        }\n\n        return _this2.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n      };\n\n      if (hasNotInSchema(schema) && !likeObject(schema)) {\n        if (canApplyNot(schema.not)) {\n          newLogic = !logic;\n          return formatInnerSchema(schema.not);\n        }\n\n        var needApplyLogicHere = !schema.not.not;\n        var prefix = logic ? \"\" : \"non \";\n        newLogic = !logic;\n        return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n      }\n\n      if (\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema[\"instanceof\"]) {\n        var value =\n        /** @type {Schema & {instanceof: string | Array<string>}} */\n        schema[\"instanceof\"];\n        var values = !Array.isArray(value) ? [value] : value;\n        return values.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        function (item) {\n          return item === \"Function\" ? \"function\" : item;\n        }).join(\" | \");\n      }\n\n      if (schema[\"enum\"]) {\n        return (\n          /** @type {Array<any>} */\n          schema[\"enum\"].map(function (item) {\n            return JSON.stringify(item);\n          }).join(\" | \")\n        );\n      }\n\n      if (typeof schema[\"const\"] !== \"undefined\") {\n        return JSON.stringify(schema[\"const\"]);\n      }\n\n      if (schema.oneOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.oneOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n\n      if (schema.anyOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.anyOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" | \")\n        );\n      }\n\n      if (schema.allOf) {\n        return (\n          /** @type {Array<Schema>} */\n          schema.allOf.map(function (item) {\n            return formatInnerSchema(item, true);\n          }).join(\" & \")\n        );\n      }\n\n      if (\n      /** @type {JSONSchema7} */\n      schema[\"if\"]) {\n        var ifValue =\n        /** @type {JSONSchema7} */\n        schema[\"if\"],\n            thenValue =\n        /** @type {JSONSchema7} */\n        schema.then,\n            elseValue =\n        /** @type {JSONSchema7} */\n        schema[\"else\"];\n        return \"\".concat(ifValue ? \"if \".concat(formatInnerSchema(ifValue)) : \"\").concat(thenValue ? \" then \".concat(formatInnerSchema(thenValue)) : \"\").concat(elseValue ? \" else \".concat(formatInnerSchema(elseValue)) : \"\");\n      }\n\n      if (schema.$ref) {\n        return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n      }\n\n      if (likeNumber(schema) || likeInteger(schema)) {\n        var _getHints = getHints(schema, logic),\n            _getHints2 = _toArray(_getHints),\n            type = _getHints2[0],\n            hints = _getHints2.slice(1);\n\n        var str = \"\".concat(type).concat(hints.length > 0 ? \" \".concat(formatHints(hints)) : \"\");\n        return logic ? str : hints.length > 0 ? \"non-\".concat(type, \" | \").concat(str) : \"non-\".concat(type);\n      }\n\n      if (likeString(schema)) {\n        var _getHints3 = getHints(schema, logic),\n            _getHints4 = _toArray(_getHints3),\n            _type = _getHints4[0],\n            _hints = _getHints4.slice(1);\n\n        var _str = \"\".concat(_type).concat(_hints.length > 0 ? \" \".concat(formatHints(_hints)) : \"\");\n\n        return logic ? _str : _str === \"string\" ? \"non-string\" : \"non-string | \".concat(_str);\n      }\n\n      if (likeBoolean(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"boolean\");\n      }\n\n      if (likeArray(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints2 = [];\n\n        if (typeof schema.minItems === \"number\") {\n          _hints2.push(\"should not have fewer than \".concat(schema.minItems, \" item\").concat(schema.minItems > 1 ? \"s\" : \"\"));\n        }\n\n        if (typeof schema.maxItems === \"number\") {\n          _hints2.push(\"should not have more than \".concat(schema.maxItems, \" item\").concat(schema.maxItems > 1 ? \"s\" : \"\"));\n        }\n\n        if (schema.uniqueItems) {\n          _hints2.push(\"should not have duplicate items\");\n        }\n\n        var hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n        var items = \"\";\n\n        if (schema.items) {\n          if (Array.isArray(schema.items) && schema.items.length > 0) {\n            items = \"\".concat(\n            /** @type {Array<Schema>} */\n            schema.items.map(function (item) {\n              return formatInnerSchema(item);\n            }).join(\", \"));\n\n            if (hasAdditionalItems) {\n              if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n                _hints2.push(\"additional items should be \".concat(formatInnerSchema(schema.additionalItems)));\n              }\n            }\n          } else if (schema.items && Object.keys(schema.items).length > 0) {\n            // \"additionalItems\" is ignored\n            items = \"\".concat(formatInnerSchema(schema.items));\n          } else {\n            // Fallback for empty `items` value\n            items = \"any\";\n          }\n        } else {\n          // \"additionalItems\" is ignored\n          items = \"any\";\n        }\n\n        if (schema.contains && Object.keys(schema.contains).length > 0) {\n          _hints2.push(\"should contains at least one \".concat(this.formatSchema(schema.contains), \" item\"));\n        }\n\n        return \"[\".concat(items).concat(hasAdditionalItems ? \", ...\" : \"\", \"]\").concat(_hints2.length > 0 ? \" (\".concat(_hints2.join(\", \"), \")\") : \"\");\n      }\n\n      if (likeObject(schema)) {\n        // not logic already applied in formatValidationError\n        newLogic = true;\n        var _hints3 = [];\n\n        if (typeof schema.minProperties === \"number\") {\n          _hints3.push(\"should not have fewer than \".concat(schema.minProperties, \" \").concat(schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n\n        if (typeof schema.maxProperties === \"number\") {\n          _hints3.push(\"should not have more than \".concat(schema.maxProperties, \" \").concat(schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"));\n        }\n\n        if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n          var patternProperties = Object.keys(schema.patternProperties);\n\n          _hints3.push(\"additional property names should match pattern\".concat(patternProperties.length > 1 ? \"s\" : \"\", \" \").concat(patternProperties.map(function (pattern) {\n            return JSON.stringify(pattern);\n          }).join(\" | \")));\n        }\n\n        var properties = schema.properties ? Object.keys(schema.properties) : [];\n        var required = schema.required ? schema.required : [];\n\n        var allProperties = _toConsumableArray(new Set(\n        /** @type {Array<string>} */\n        [].concat(required).concat(properties)));\n\n        var objectStructure = allProperties.map(function (property) {\n          var isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n          // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n          return \"\".concat(property).concat(isRequired ? \"\" : \"?\");\n        }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [\"<key>: \".concat(formatInnerSchema(schema.additionalProperties))] : [\"…\"] : []).join(\", \");\n        var dependencies =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.dependencies,\n            propertyNames =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.propertyNames,\n            patternRequired =\n        /** @type {Schema & {patternRequired?: Array<string>;}} */\n        schema.patternRequired;\n\n        if (dependencies) {\n          Object.keys(dependencies).forEach(function (dependencyName) {\n            var dependency = dependencies[dependencyName];\n\n            if (Array.isArray(dependency)) {\n              _hints3.push(\"should have \".concat(dependency.length > 1 ? \"properties\" : \"property\", \" \").concat(dependency.map(function (dep) {\n                return \"'\".concat(dep, \"'\");\n              }).join(\", \"), \" when property '\").concat(dependencyName, \"' is present\"));\n            } else {\n              _hints3.push(\"should be valid according to the schema \".concat(formatInnerSchema(dependency), \" when property '\").concat(dependencyName, \"' is present\"));\n            }\n          });\n        }\n\n        if (propertyNames && Object.keys(propertyNames).length > 0) {\n          _hints3.push(\"each property name should match format \".concat(JSON.stringify(schema.propertyNames.format)));\n        }\n\n        if (patternRequired && patternRequired.length > 0) {\n          _hints3.push(\"should have property matching pattern \".concat(patternRequired.map(\n          /**\n           * @param {string} item\n           * @returns {string}\n           */\n          function (item) {\n            return JSON.stringify(item);\n          })));\n        }\n\n        return \"object {\".concat(objectStructure ? \" \".concat(objectStructure, \" \") : \"\", \"}\").concat(_hints3.length > 0 ? \" (\".concat(_hints3.join(\", \"), \")\") : \"\");\n      }\n\n      if (likeNull(schema)) {\n        return \"\".concat(logic ? \"\" : \"non-\", \"null\");\n      }\n\n      if (Array.isArray(schema.type)) {\n        // not logic already applied in formatValidationError\n        return \"\".concat(schema.type.join(\" | \"));\n      } // Fallback for unknown keywords\n      // not logic already applied in formatValidationError\n\n      /* istanbul ignore next */\n\n\n      return JSON.stringify(schema, null, 2);\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @param {(boolean | Array<string>)=} additionalPath\n     * @param {boolean=} needDot\n     * @param {boolean=} logic\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getSchemaPartText\",\n    value: function getSchemaPartText(schemaPart, additionalPath) {\n      var needDot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var logic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      if (!schemaPart) {\n        return \"\";\n      }\n\n      if (Array.isArray(additionalPath)) {\n        for (var i = 0; i < additionalPath.length; i++) {\n          /** @type {Schema | undefined} */\n          var inner = schemaPart[\n          /** @type {keyof Schema} */\n          additionalPath[i]];\n\n          if (inner) {\n            // eslint-disable-next-line no-param-reassign\n            schemaPart = inner;\n          } else {\n            break;\n          }\n        }\n      }\n\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n\n      var schemaText = \"\".concat(this.formatSchema(schemaPart, logic)).concat(needDot ? \".\" : \"\");\n\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n\n      return schemaText;\n    }\n    /**\n     * @param {Schema=} schemaPart\n     * @returns {string}\n     */\n\n  }, {\n    key: \"getSchemaPartDescription\",\n    value: function getSchemaPartDescription(schemaPart) {\n      if (!schemaPart) {\n        return \"\";\n      }\n\n      while (schemaPart.$ref) {\n        // eslint-disable-next-line no-param-reassign\n        schemaPart = this.getSchemaPart(schemaPart.$ref);\n      }\n\n      var schemaText = \"\";\n\n      if (schemaPart.description) {\n        schemaText += \"\\n-> \".concat(schemaPart.description);\n      }\n\n      if (schemaPart.link) {\n        schemaText += \"\\n-> Read more at \".concat(schemaPart.link);\n      }\n\n      return schemaText;\n    }\n    /**\n     * @param {SchemaUtilErrorObject} error\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatValidationError\",\n    value: function formatValidationError(error) {\n      var _this3 = this;\n\n      var keyword = error.keyword,\n          errorDataPath = error.dataPath;\n      var dataPath = \"\".concat(this.baseDataPath).concat(errorDataPath);\n\n      switch (keyword) {\n        case \"type\":\n          {\n            var parentSchema = error.parentSchema,\n                params = error.params; // eslint-disable-next-line default-case\n\n            switch (\n            /** @type {import(\"ajv\").TypeParams} */\n            params.type) {\n              case \"number\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"integer\":\n                return \"\".concat(dataPath, \" should be an \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"string\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"boolean\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              case \"array\":\n                return \"\".concat(dataPath, \" should be an array:\\n\").concat(this.getSchemaPartText(parentSchema));\n\n              case \"object\":\n                return \"\".concat(dataPath, \" should be an object:\\n\").concat(this.getSchemaPartText(parentSchema));\n\n              case \"null\":\n                return \"\".concat(dataPath, \" should be a \").concat(this.getSchemaPartText(parentSchema, false, true));\n\n              default:\n                return \"\".concat(dataPath, \" should be:\\n\").concat(this.getSchemaPartText(parentSchema));\n            }\n          }\n\n        case \"instanceof\":\n          {\n            var _parentSchema = error.parentSchema;\n            return \"\".concat(dataPath, \" should be an instance of \").concat(this.getSchemaPartText(_parentSchema, false, true));\n          }\n\n        case \"pattern\":\n          {\n            var _params = error.params,\n                _parentSchema2 = error.parentSchema;\n            var pattern =\n            /** @type {import(\"ajv\").PatternParams} */\n            _params.pattern;\n            return \"\".concat(dataPath, \" should match pattern \").concat(JSON.stringify(pattern)).concat(getSchemaNonTypes(_parentSchema2), \".\").concat(this.getSchemaPartDescription(_parentSchema2));\n          }\n\n        case \"format\":\n          {\n            var _params2 = error.params,\n                _parentSchema3 = error.parentSchema;\n            var format =\n            /** @type {import(\"ajv\").FormatParams} */\n            _params2.format;\n            return \"\".concat(dataPath, \" should match format \").concat(JSON.stringify(format)).concat(getSchemaNonTypes(_parentSchema3), \".\").concat(this.getSchemaPartDescription(_parentSchema3));\n          }\n\n        case \"formatMinimum\":\n        case \"formatMaximum\":\n          {\n            var _params3 = error.params,\n                _parentSchema4 = error.parentSchema;\n            var comparison =\n            /** @type {import(\"ajv\").ComparisonParams} */\n            _params3.comparison,\n                limit =\n            /** @type {import(\"ajv\").ComparisonParams} */\n            _params3.limit;\n            return \"\".concat(dataPath, \" should be \").concat(comparison, \" \").concat(JSON.stringify(limit)).concat(getSchemaNonTypes(_parentSchema4), \".\").concat(this.getSchemaPartDescription(_parentSchema4));\n          }\n\n        case \"minimum\":\n        case \"maximum\":\n        case \"exclusiveMinimum\":\n        case \"exclusiveMaximum\":\n          {\n            var _parentSchema5 = error.parentSchema,\n                _params4 = error.params;\n            var _comparison =\n            /** @type {import(\"ajv\").ComparisonParams} */\n            _params4.comparison,\n                _limit =\n            /** @type {import(\"ajv\").ComparisonParams} */\n            _params4.limit;\n\n            var _getHints5 = getHints(\n            /** @type {Schema} */\n            _parentSchema5, true),\n                _getHints6 = _toArray(_getHints5),\n                hints = _getHints6.slice(1);\n\n            if (hints.length === 0) {\n              hints.push(\"should be \".concat(_comparison, \" \").concat(_limit));\n            }\n\n            return \"\".concat(dataPath, \" \").concat(hints.join(\" \")).concat(getSchemaNonTypes(_parentSchema5), \".\").concat(this.getSchemaPartDescription(_parentSchema5));\n          }\n\n        case \"multipleOf\":\n          {\n            var _params5 = error.params,\n                _parentSchema6 = error.parentSchema;\n            var multipleOf =\n            /** @type {import(\"ajv\").MultipleOfParams} */\n            _params5.multipleOf;\n            return \"\".concat(dataPath, \" should be multiple of \").concat(multipleOf).concat(getSchemaNonTypes(_parentSchema6), \".\").concat(this.getSchemaPartDescription(_parentSchema6));\n          }\n\n        case \"patternRequired\":\n          {\n            var _params6 = error.params,\n                _parentSchema7 = error.parentSchema;\n            var missingPattern =\n            /** @type {import(\"ajv\").PatternRequiredParams} */\n            _params6.missingPattern;\n            return \"\".concat(dataPath, \" should have property matching pattern \").concat(JSON.stringify(missingPattern)).concat(getSchemaNonTypes(_parentSchema7), \".\").concat(this.getSchemaPartDescription(_parentSchema7));\n          }\n\n        case \"minLength\":\n          {\n            var _params7 = error.params,\n                _parentSchema8 = error.parentSchema;\n            var _limit2 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params7.limit;\n\n            if (_limit2 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty string\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n            }\n\n            var length = _limit2 - 1;\n            return \"\".concat(dataPath, \" should be longer than \").concat(length, \" character\").concat(length > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema8), \".\").concat(this.getSchemaPartDescription(_parentSchema8));\n          }\n\n        case \"minItems\":\n          {\n            var _params8 = error.params,\n                _parentSchema9 = error.parentSchema;\n            var _limit3 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params8.limit;\n\n            if (_limit3 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty array\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n            }\n\n            return \"\".concat(dataPath, \" should not have fewer than \").concat(_limit3, \" items\").concat(getSchemaNonTypes(_parentSchema9), \".\").concat(this.getSchemaPartDescription(_parentSchema9));\n          }\n\n        case \"minProperties\":\n          {\n            var _params9 = error.params,\n                _parentSchema10 = error.parentSchema;\n            var _limit4 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params9.limit;\n\n            if (_limit4 === 1) {\n              return \"\".concat(dataPath, \" should be a non-empty object\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n            }\n\n            return \"\".concat(dataPath, \" should not have fewer than \").concat(_limit4, \" properties\").concat(getSchemaNonTypes(_parentSchema10), \".\").concat(this.getSchemaPartDescription(_parentSchema10));\n          }\n\n        case \"maxLength\":\n          {\n            var _params10 = error.params,\n                _parentSchema11 = error.parentSchema;\n            var _limit5 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params10.limit;\n            var max = _limit5 + 1;\n            return \"\".concat(dataPath, \" should be shorter than \").concat(max, \" character\").concat(max > 1 ? \"s\" : \"\").concat(getSchemaNonTypes(_parentSchema11), \".\").concat(this.getSchemaPartDescription(_parentSchema11));\n          }\n\n        case \"maxItems\":\n          {\n            var _params11 = error.params,\n                _parentSchema12 = error.parentSchema;\n            var _limit6 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params11.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit6, \" items\").concat(getSchemaNonTypes(_parentSchema12), \".\").concat(this.getSchemaPartDescription(_parentSchema12));\n          }\n\n        case \"maxProperties\":\n          {\n            var _params12 = error.params,\n                _parentSchema13 = error.parentSchema;\n            var _limit7 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params12.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit7, \" properties\").concat(getSchemaNonTypes(_parentSchema13), \".\").concat(this.getSchemaPartDescription(_parentSchema13));\n          }\n\n        case \"uniqueItems\":\n          {\n            var _params13 = error.params,\n                _parentSchema14 = error.parentSchema;\n            var i =\n            /** @type {import(\"ajv\").UniqueItemsParams} */\n            _params13.i;\n            return \"\".concat(dataPath, \" should not contain the item '\").concat(error.data[i], \"' twice\").concat(getSchemaNonTypes(_parentSchema14), \".\").concat(this.getSchemaPartDescription(_parentSchema14));\n          }\n\n        case \"additionalItems\":\n          {\n            var _params14 = error.params,\n                _parentSchema15 = error.parentSchema;\n            var _limit8 =\n            /** @type {import(\"ajv\").LimitParams} */\n            _params14.limit;\n            return \"\".concat(dataPath, \" should not have more than \").concat(_limit8, \" items\").concat(getSchemaNonTypes(_parentSchema15), \". These items are valid:\\n\").concat(this.getSchemaPartText(_parentSchema15));\n          }\n\n        case \"contains\":\n          {\n            var _parentSchema16 = error.parentSchema;\n            return \"\".concat(dataPath, \" should contains at least one \").concat(this.getSchemaPartText(_parentSchema16, [\"contains\"]), \" item\").concat(getSchemaNonTypes(_parentSchema16), \".\");\n          }\n\n        case \"required\":\n          {\n            var _parentSchema17 = error.parentSchema,\n                _params15 = error.params;\n\n            var missingProperty =\n            /** @type {import(\"ajv\").DependenciesParams} */\n            _params15.missingProperty.replace(/^\\./, \"\");\n\n            var hasProperty = _parentSchema17 && Boolean(\n            /** @type {Schema} */\n            _parentSchema17.properties &&\n            /** @type {Schema} */\n            _parentSchema17.properties[missingProperty]);\n\n            return \"\".concat(dataPath, \" misses the property '\").concat(missingProperty, \"'\").concat(getSchemaNonTypes(_parentSchema17), \".\").concat(hasProperty ? \" Should be:\\n\".concat(this.getSchemaPartText(_parentSchema17, [\"properties\", missingProperty])) : this.getSchemaPartDescription(_parentSchema17));\n          }\n\n        case \"additionalProperties\":\n          {\n            var _params16 = error.params,\n                _parentSchema18 = error.parentSchema;\n            var additionalProperty =\n            /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n            _params16.additionalProperty;\n            return \"\".concat(dataPath, \" has an unknown property '\").concat(additionalProperty, \"'\").concat(getSchemaNonTypes(_parentSchema18), \". These properties are valid:\\n\").concat(this.getSchemaPartText(_parentSchema18));\n          }\n\n        case \"dependencies\":\n          {\n            var _params17 = error.params,\n                _parentSchema19 = error.parentSchema;\n            var property =\n            /** @type {import(\"ajv\").DependenciesParams} */\n            _params17.property,\n                deps =\n            /** @type {import(\"ajv\").DependenciesParams} */\n            _params17.deps;\n            var dependencies = deps.split(\",\").map(\n            /**\n             * @param {string} dep\n             * @returns {string}\n             */\n            function (dep) {\n              return \"'\".concat(dep.trim(), \"'\");\n            }).join(\", \");\n            return \"\".concat(dataPath, \" should have properties \").concat(dependencies, \" when property '\").concat(property, \"' is present\").concat(getSchemaNonTypes(_parentSchema19), \".\").concat(this.getSchemaPartDescription(_parentSchema19));\n          }\n\n        case \"propertyNames\":\n          {\n            var _params18 = error.params,\n                _parentSchema20 = error.parentSchema,\n                schema = error.schema;\n            var propertyName =\n            /** @type {import(\"ajv\").PropertyNamesParams} */\n            _params18.propertyName;\n            return \"\".concat(dataPath, \" property name '\").concat(propertyName, \"' is invalid\").concat(getSchemaNonTypes(_parentSchema20), \". Property names should be match format \").concat(JSON.stringify(schema.format), \".\").concat(this.getSchemaPartDescription(_parentSchema20));\n          }\n\n        case \"enum\":\n          {\n            var _parentSchema21 = error.parentSchema;\n\n            if (_parentSchema21 &&\n            /** @type {Schema} */\n            _parentSchema21[\"enum\"] &&\n            /** @type {Schema} */\n            _parentSchema21[\"enum\"].length === 1) {\n              return \"\".concat(dataPath, \" should be \").concat(this.getSchemaPartText(_parentSchema21, false, true));\n            }\n\n            return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema21));\n          }\n\n        case \"const\":\n          {\n            var _parentSchema22 = error.parentSchema;\n            return \"\".concat(dataPath, \" should be equal to constant \").concat(this.getSchemaPartText(_parentSchema22, false, true));\n          }\n\n        case \"not\":\n          {\n            var postfix = likeObject(\n            /** @type {Schema} */\n            error.parentSchema) ? \"\\n\".concat(this.getSchemaPartText(error.parentSchema)) : \"\";\n            var schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n            if (canApplyNot(error.schema)) {\n              return \"\".concat(dataPath, \" should be any \").concat(schemaOutput).concat(postfix, \".\");\n            }\n\n            var _schema = error.schema,\n                _parentSchema23 = error.parentSchema;\n            return \"\".concat(dataPath, \" should not be \").concat(this.getSchemaPartText(_schema, false, true)).concat(_parentSchema23 && likeObject(_parentSchema23) ? \"\\n\".concat(this.getSchemaPartText(_parentSchema23)) : \"\");\n          }\n\n        case \"oneOf\":\n        case \"anyOf\":\n          {\n            var _parentSchema24 = error.parentSchema,\n                children = error.children;\n\n            if (children && children.length > 0) {\n              if (error.schema.length === 1) {\n                var lastChild = children[children.length - 1];\n                var remainingChildren = children.slice(0, children.length - 1);\n                return this.formatValidationError(Object.assign({}, lastChild, {\n                  children: remainingChildren,\n                  parentSchema: Object.assign({}, _parentSchema24, lastChild.parentSchema)\n                }));\n              }\n\n              var filteredChildren = filterChildren(children);\n\n              if (filteredChildren.length === 1) {\n                return this.formatValidationError(filteredChildren[0]);\n              }\n\n              filteredChildren = groupChildrenByFirstChild(filteredChildren);\n              return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24), \"\\nDetails:\\n\").concat(filteredChildren.map(\n              /**\n               * @param {SchemaUtilErrorObject} nestedError\n               * @returns {string}\n               */\n              function (nestedError) {\n                return \" * \".concat(indent(_this3.formatValidationError(nestedError), \"   \"));\n              }).join(\"\\n\"));\n            }\n\n            return \"\".concat(dataPath, \" should be one of these:\\n\").concat(this.getSchemaPartText(_parentSchema24));\n          }\n\n        case \"if\":\n          {\n            var _params19 = error.params,\n                _parentSchema25 = error.parentSchema;\n            var failingKeyword =\n            /** @type {import(\"ajv\").IfParams} */\n            _params19.failingKeyword;\n            return \"\".concat(dataPath, \" should match \\\"\").concat(failingKeyword, \"\\\" schema:\\n\").concat(this.getSchemaPartText(_parentSchema25, [failingKeyword]));\n          }\n\n        case \"absolutePath\":\n          {\n            var message = error.message,\n                _parentSchema26 = error.parentSchema;\n            return \"\".concat(dataPath, \": \").concat(message).concat(this.getSchemaPartDescription(_parentSchema26));\n          }\n\n        /* istanbul ignore next */\n\n        default:\n          {\n            var _message = error.message,\n                _parentSchema27 = error.parentSchema;\n            var ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n            // Fallback for unknown keywords\n\n            return \"\".concat(dataPath, \" \").concat(_message, \" (\").concat(ErrorInJSON, \").\\n\").concat(this.getSchemaPartText(_parentSchema27, false));\n          }\n      }\n    }\n    /**\n     * @param {Array<SchemaUtilErrorObject>} errors\n     * @returns {string}\n     */\n\n  }, {\n    key: \"formatValidationErrors\",\n    value: function formatValidationErrors(errors) {\n      var _this4 = this;\n\n      return errors.map(function (error) {\n        var formattedError = _this4.formatValidationError(error);\n\n        if (_this4.postFormatter) {\n          formattedError = _this4.postFormatter(formattedError, error);\n        }\n\n        return \" - \".concat(indent(formattedError, \"   \"));\n      }).join(\"\\n\");\n    }\n  }]);\n\n  return ValidationError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar _default = ValidationError;\nexports[\"default\"] = _default;","map":{"version":3,"names":["Object","defineProperty","exports","value","require","stringHints","numberHints","SPECIFICITY","type","not","oneOf","anyOf","required","pattern","patternRequired","format","formatMinimum","formatMaximum","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","uniqueItems","contains","minLength","maxLength","minItems","maxItems","minProperties","maxProperties","dependencies","propertyNames","additionalItems","additionalProperties","absolutePath","filterMax","array","fn","evaluatedMax","reduce","max","item","Math","filter","filterChildren","children","newChildren","error","dataPath","length","keyword","findAllChildren","schemaPaths","i","predicate","schemaPath","indexOf","every","refs","extractRefs","childrenStart","slice","concat","schema","Array","isArray","map","$ref","s","groupChildrenByFirstChild","result","child","push","assign","reverse","indent","str","prefix","replace","hasNotInSchema","findFirstTypedSchema","canApplyNot","typedSchema","likeNumber","likeInteger","likeString","likeNull","likeBoolean","isObject","maybeObj","likeArray","items","likeObject","properties","patternProperties","getArticle","test","getSchemaNonTypes","formatHints","hints","join","getHints","logic","ValidationError","errors","configuration","name","headerNameFromSchema","baseDataPathFromSchema","title","baseDataPath","splittedTitleFromSchema","match","headerName","postFormatter","header","message","formatValidationErrors","Error","captureStackTrace","constructor","path","newPath","split","schemaPart","inner","prevSchemas","newLogic","formatInnerSchema","innerSchema","addSelf","formatSchema","includes","needApplyLogicHere","values","JSON","stringify","allOf","ifValue","thenValue","then","elseValue","getSchemaPart","hasAdditionalItems","Boolean","keys","allProperties","Set","objectStructure","property","isRequired","forEach","dependencyName","dependency","dep","additionalPath","needDot","schemaText","description","link","errorDataPath","parentSchema","params","getSchemaPartText","getSchemaPartDescription","comparison","limit","missingPattern","data","missingProperty","hasProperty","additionalProperty","deps","trim","propertyName","postfix","schemaOutput","lastChild","remainingChildren","formatValidationError","filteredChildren","nestedError","failingKeyword","ErrorInJSON","formattedError","_default"],"sources":["D:/Work/Project/LMS/lms/node_modules/terser-webpack-plugin/node_modules/schema-utils/dist/ValidationError.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nconst {\n  stringHints,\n  numberHints\n} = require(\"./util/hints\");\n/** @typedef {import(\"json-schema\").JSONSchema6} JSONSchema6 */\n\n/** @typedef {import(\"json-schema\").JSONSchema7} JSONSchema7 */\n\n/** @typedef {import(\"./validate\").Schema} Schema */\n\n/** @typedef {import(\"./validate\").ValidationErrorConfiguration} ValidationErrorConfiguration */\n\n/** @typedef {import(\"./validate\").PostFormatter} PostFormatter */\n\n/** @typedef {import(\"./validate\").SchemaUtilErrorObject} SchemaUtilErrorObject */\n\n/** @enum {number} */\n\n\nconst SPECIFICITY = {\n  type: 1,\n  not: 1,\n  oneOf: 1,\n  anyOf: 1,\n  if: 1,\n  enum: 1,\n  const: 1,\n  instanceof: 1,\n  required: 2,\n  pattern: 2,\n  patternRequired: 2,\n  format: 2,\n  formatMinimum: 2,\n  formatMaximum: 2,\n  minimum: 2,\n  exclusiveMinimum: 2,\n  maximum: 2,\n  exclusiveMaximum: 2,\n  multipleOf: 2,\n  uniqueItems: 2,\n  contains: 2,\n  minLength: 2,\n  maxLength: 2,\n  minItems: 2,\n  maxItems: 2,\n  minProperties: 2,\n  maxProperties: 2,\n  dependencies: 2,\n  propertyNames: 2,\n  additionalItems: 2,\n  additionalProperties: 2,\n  absolutePath: 2\n};\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} array\n * @param {(item: SchemaUtilErrorObject) => number} fn\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\nfunction filterMax(array, fn) {\n  const evaluatedMax = array.reduce((max, item) => Math.max(max, fn(item)), 0);\n  return array.filter(item => fn(item) === evaluatedMax);\n}\n/**\n *\n * @param {Array<SchemaUtilErrorObject>} children\n * @returns {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction filterChildren(children) {\n  let newChildren = children;\n  newChildren = filterMax(newChildren,\n  /**\n   *\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => error.dataPath ? error.dataPath.length : 0);\n  newChildren = filterMax(newChildren,\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {number}\n   */\n  error => SPECIFICITY[\n  /** @type {keyof typeof SPECIFICITY} */\n  error.keyword] || 2);\n  return newChildren;\n}\n/**\n * Find all children errors\n * @param {Array<SchemaUtilErrorObject>} children\n * @param {Array<string>} schemaPaths\n * @return {number} returns index of first child\n */\n\n\nfunction findAllChildren(children, schemaPaths) {\n  let i = children.length - 1;\n\n  const predicate =\n  /**\n   * @param {string} schemaPath\n   * @returns {boolean}\n   */\n  schemaPath => children[i].schemaPath.indexOf(schemaPath) !== 0;\n\n  while (i > -1 && !schemaPaths.every(predicate)) {\n    if (children[i].keyword === \"anyOf\" || children[i].keyword === \"oneOf\") {\n      const refs = extractRefs(children[i]);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(children[i].schemaPath));\n      i = childrenStart - 1;\n    } else {\n      i -= 1;\n    }\n  }\n\n  return i + 1;\n}\n/**\n * Extracts all refs from schema\n * @param {SchemaUtilErrorObject} error\n * @return {Array<string>}\n */\n\n\nfunction extractRefs(error) {\n  const {\n    schema\n  } = error;\n\n  if (!Array.isArray(schema)) {\n    return [];\n  }\n\n  return schema.map(({\n    $ref\n  }) => $ref).filter(s => s);\n}\n/**\n * Groups children by their first level parent (assuming that error is root)\n * @param {Array<SchemaUtilErrorObject>} children\n * @return {Array<SchemaUtilErrorObject>}\n */\n\n\nfunction groupChildrenByFirstChild(children) {\n  const result = [];\n  let i = children.length - 1;\n\n  while (i > 0) {\n    const child = children[i];\n\n    if (child.keyword === \"anyOf\" || child.keyword === \"oneOf\") {\n      const refs = extractRefs(child);\n      const childrenStart = findAllChildren(children.slice(0, i), refs.concat(child.schemaPath));\n\n      if (childrenStart !== i) {\n        result.push(Object.assign({}, child, {\n          children: children.slice(childrenStart, i)\n        }));\n        i = childrenStart;\n      } else {\n        result.push(child);\n      }\n    } else {\n      result.push(child);\n    }\n\n    i -= 1;\n  }\n\n  if (i === 0) {\n    result.push(children[i]);\n  }\n\n  return result.reverse();\n}\n/**\n * @param {string} str\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction indent(str, prefix) {\n  return str.replace(/\\n(?!$)/g, `\\n${prefix}`);\n}\n/**\n * @param {Schema} schema\n * @returns {schema is (Schema & {not: Schema})}\n */\n\n\nfunction hasNotInSchema(schema) {\n  return !!schema.not;\n}\n/**\n * @param {Schema} schema\n * @return {Schema}\n */\n\n\nfunction findFirstTypedSchema(schema) {\n  if (hasNotInSchema(schema)) {\n    return findFirstTypedSchema(schema.not);\n  }\n\n  return schema;\n}\n/**\n * @param {Schema} schema\n * @return {boolean}\n */\n\n\nfunction canApplyNot(schema) {\n  const typedSchema = findFirstTypedSchema(schema);\n  return likeNumber(typedSchema) || likeInteger(typedSchema) || likeString(typedSchema) || likeNull(typedSchema) || likeBoolean(typedSchema);\n}\n/**\n * @param {any} maybeObj\n * @returns {boolean}\n */\n\n\nfunction isObject(maybeObj) {\n  return typeof maybeObj === \"object\" && maybeObj !== null;\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNumber(schema) {\n  return schema.type === \"number\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeInteger(schema) {\n  return schema.type === \"integer\" || typeof schema.minimum !== \"undefined\" || typeof schema.exclusiveMinimum !== \"undefined\" || typeof schema.maximum !== \"undefined\" || typeof schema.exclusiveMaximum !== \"undefined\" || typeof schema.multipleOf !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeString(schema) {\n  return schema.type === \"string\" || typeof schema.minLength !== \"undefined\" || typeof schema.maxLength !== \"undefined\" || typeof schema.pattern !== \"undefined\" || typeof schema.format !== \"undefined\" || typeof schema.formatMinimum !== \"undefined\" || typeof schema.formatMaximum !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeBoolean(schema) {\n  return schema.type === \"boolean\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeArray(schema) {\n  return schema.type === \"array\" || typeof schema.minItems === \"number\" || typeof schema.maxItems === \"number\" || typeof schema.uniqueItems !== \"undefined\" || typeof schema.items !== \"undefined\" || typeof schema.additionalItems !== \"undefined\" || typeof schema.contains !== \"undefined\";\n}\n/**\n * @param {Schema & {patternRequired?: Array<string>}} schema\n * @returns {boolean}\n */\n\n\nfunction likeObject(schema) {\n  return schema.type === \"object\" || typeof schema.minProperties !== \"undefined\" || typeof schema.maxProperties !== \"undefined\" || typeof schema.required !== \"undefined\" || typeof schema.properties !== \"undefined\" || typeof schema.patternProperties !== \"undefined\" || typeof schema.additionalProperties !== \"undefined\" || typeof schema.dependencies !== \"undefined\" || typeof schema.propertyNames !== \"undefined\" || typeof schema.patternRequired !== \"undefined\";\n}\n/**\n * @param {Schema} schema\n * @returns {boolean}\n */\n\n\nfunction likeNull(schema) {\n  return schema.type === \"null\";\n}\n/**\n * @param {string} type\n * @returns {string}\n */\n\n\nfunction getArticle(type) {\n  if (/^[aeiou]/i.test(type)) {\n    return \"an\";\n  }\n\n  return \"a\";\n}\n/**\n * @param {Schema=} schema\n * @returns {string}\n */\n\n\nfunction getSchemaNonTypes(schema) {\n  if (!schema) {\n    return \"\";\n  }\n\n  if (!schema.type) {\n    if (likeNumber(schema) || likeInteger(schema)) {\n      return \" | should be any non-number\";\n    }\n\n    if (likeString(schema)) {\n      return \" | should be any non-string\";\n    }\n\n    if (likeArray(schema)) {\n      return \" | should be any non-array\";\n    }\n\n    if (likeObject(schema)) {\n      return \" | should be any non-object\";\n    }\n  }\n\n  return \"\";\n}\n/**\n * @param {Array<string>} hints\n * @returns {string}\n */\n\n\nfunction formatHints(hints) {\n  return hints.length > 0 ? `(${hints.join(\", \")})` : \"\";\n}\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @returns {string[]}\n */\n\n\nfunction getHints(schema, logic) {\n  if (likeNumber(schema) || likeInteger(schema)) {\n    return numberHints(schema, logic);\n  } else if (likeString(schema)) {\n    return stringHints(schema, logic);\n  }\n\n  return [];\n}\n\nclass ValidationError extends Error {\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @param {Schema} schema\n   * @param {ValidationErrorConfiguration} configuration\n   */\n  constructor(errors, schema, configuration = {}) {\n    super();\n    /** @type {string} */\n\n    this.name = \"ValidationError\";\n    /** @type {Array<SchemaUtilErrorObject>} */\n\n    this.errors = errors;\n    /** @type {Schema} */\n\n    this.schema = schema;\n    let headerNameFromSchema;\n    let baseDataPathFromSchema;\n\n    if (schema.title && (!configuration.name || !configuration.baseDataPath)) {\n      const splittedTitleFromSchema = schema.title.match(/^(.+) (.+)$/);\n\n      if (splittedTitleFromSchema) {\n        if (!configuration.name) {\n          [, headerNameFromSchema] = splittedTitleFromSchema;\n        }\n\n        if (!configuration.baseDataPath) {\n          [,, baseDataPathFromSchema] = splittedTitleFromSchema;\n        }\n      }\n    }\n    /** @type {string} */\n\n\n    this.headerName = configuration.name || headerNameFromSchema || \"Object\";\n    /** @type {string} */\n\n    this.baseDataPath = configuration.baseDataPath || baseDataPathFromSchema || \"configuration\";\n    /** @type {PostFormatter | null} */\n\n    this.postFormatter = configuration.postFormatter || null;\n    const header = `Invalid ${this.baseDataPath} object. ${this.headerName} has been initialized using ${getArticle(this.baseDataPath)} ${this.baseDataPath} object that does not match the API schema.\\n`;\n    /** @type {string} */\n\n    this.message = `${header}${this.formatValidationErrors(errors)}`;\n    Error.captureStackTrace(this, this.constructor);\n  }\n  /**\n   * @param {string} path\n   * @returns {Schema}\n   */\n\n\n  getSchemaPart(path) {\n    const newPath = path.split(\"/\");\n    let schemaPart = this.schema;\n\n    for (let i = 1; i < newPath.length; i++) {\n      const inner = schemaPart[\n      /** @type {keyof Schema} */\n      newPath[i]];\n\n      if (!inner) {\n        break;\n      }\n\n      schemaPart = inner;\n    }\n\n    return schemaPart;\n  }\n  /**\n   * @param {Schema} schema\n   * @param {boolean} logic\n   * @param {Array<Object>} prevSchemas\n   * @returns {string}\n   */\n\n\n  formatSchema(schema, logic = true, prevSchemas = []) {\n    let newLogic = logic;\n\n    const formatInnerSchema =\n    /**\n     *\n     * @param {Object} innerSchema\n     * @param {boolean=} addSelf\n     * @returns {string}\n     */\n    (innerSchema, addSelf) => {\n      if (!addSelf) {\n        return this.formatSchema(innerSchema, newLogic, prevSchemas);\n      }\n\n      if (prevSchemas.includes(innerSchema)) {\n        return \"(recursive)\";\n      }\n\n      return this.formatSchema(innerSchema, newLogic, prevSchemas.concat(schema));\n    };\n\n    if (hasNotInSchema(schema) && !likeObject(schema)) {\n      if (canApplyNot(schema.not)) {\n        newLogic = !logic;\n        return formatInnerSchema(schema.not);\n      }\n\n      const needApplyLogicHere = !schema.not.not;\n      const prefix = logic ? \"\" : \"non \";\n      newLogic = !logic;\n      return needApplyLogicHere ? prefix + formatInnerSchema(schema.not) : formatInnerSchema(schema.not);\n    }\n\n    if (\n    /** @type {Schema & {instanceof: string | Array<string>}} */\n    schema.instanceof) {\n      const {\n        instanceof: value\n      } =\n      /** @type {Schema & {instanceof: string | Array<string>}} */\n      schema;\n      const values = !Array.isArray(value) ? [value] : value;\n      return values.map(\n      /**\n       * @param {string} item\n       * @returns {string}\n       */\n      item => item === \"Function\" ? \"function\" : item).join(\" | \");\n    }\n\n    if (schema.enum) {\n      return (\n        /** @type {Array<any>} */\n        schema.enum.map(item => JSON.stringify(item)).join(\" | \")\n      );\n    }\n\n    if (typeof schema.const !== \"undefined\") {\n      return JSON.stringify(schema.const);\n    }\n\n    if (schema.oneOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.oneOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.anyOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.anyOf.map(item => formatInnerSchema(item, true)).join(\" | \")\n      );\n    }\n\n    if (schema.allOf) {\n      return (\n        /** @type {Array<Schema>} */\n        schema.allOf.map(item => formatInnerSchema(item, true)).join(\" & \")\n      );\n    }\n\n    if (\n    /** @type {JSONSchema7} */\n    schema.if) {\n      const {\n        if: ifValue,\n        then: thenValue,\n        else: elseValue\n      } =\n      /** @type {JSONSchema7} */\n      schema;\n      return `${ifValue ? `if ${formatInnerSchema(ifValue)}` : \"\"}${thenValue ? ` then ${formatInnerSchema(thenValue)}` : \"\"}${elseValue ? ` else ${formatInnerSchema(elseValue)}` : \"\"}`;\n    }\n\n    if (schema.$ref) {\n      return formatInnerSchema(this.getSchemaPart(schema.$ref), true);\n    }\n\n    if (likeNumber(schema) || likeInteger(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : hints.length > 0 ? `non-${type} | ${str}` : `non-${type}`;\n    }\n\n    if (likeString(schema)) {\n      const [type, ...hints] = getHints(schema, logic);\n      const str = `${type}${hints.length > 0 ? ` ${formatHints(hints)}` : \"\"}`;\n      return logic ? str : str === \"string\" ? \"non-string\" : `non-string | ${str}`;\n    }\n\n    if (likeBoolean(schema)) {\n      return `${logic ? \"\" : \"non-\"}boolean`;\n    }\n\n    if (likeArray(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minItems === \"number\") {\n        hints.push(`should not have fewer than ${schema.minItems} item${schema.minItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (typeof schema.maxItems === \"number\") {\n        hints.push(`should not have more than ${schema.maxItems} item${schema.maxItems > 1 ? \"s\" : \"\"}`);\n      }\n\n      if (schema.uniqueItems) {\n        hints.push(\"should not have duplicate items\");\n      }\n\n      const hasAdditionalItems = typeof schema.additionalItems === \"undefined\" || Boolean(schema.additionalItems);\n      let items = \"\";\n\n      if (schema.items) {\n        if (Array.isArray(schema.items) && schema.items.length > 0) {\n          items = `${\n          /** @type {Array<Schema>} */\n          schema.items.map(item => formatInnerSchema(item)).join(\", \")}`;\n\n          if (hasAdditionalItems) {\n            if (schema.additionalItems && isObject(schema.additionalItems) && Object.keys(schema.additionalItems).length > 0) {\n              hints.push(`additional items should be ${formatInnerSchema(schema.additionalItems)}`);\n            }\n          }\n        } else if (schema.items && Object.keys(schema.items).length > 0) {\n          // \"additionalItems\" is ignored\n          items = `${formatInnerSchema(schema.items)}`;\n        } else {\n          // Fallback for empty `items` value\n          items = \"any\";\n        }\n      } else {\n        // \"additionalItems\" is ignored\n        items = \"any\";\n      }\n\n      if (schema.contains && Object.keys(schema.contains).length > 0) {\n        hints.push(`should contains at least one ${this.formatSchema(schema.contains)} item`);\n      }\n\n      return `[${items}${hasAdditionalItems ? \", ...\" : \"\"}]${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeObject(schema)) {\n      // not logic already applied in formatValidationError\n      newLogic = true;\n      const hints = [];\n\n      if (typeof schema.minProperties === \"number\") {\n        hints.push(`should not have fewer than ${schema.minProperties} ${schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (typeof schema.maxProperties === \"number\") {\n        hints.push(`should not have more than ${schema.maxProperties} ${schema.minProperties && schema.minProperties > 1 ? \"properties\" : \"property\"}`);\n      }\n\n      if (schema.patternProperties && Object.keys(schema.patternProperties).length > 0) {\n        const patternProperties = Object.keys(schema.patternProperties);\n        hints.push(`additional property names should match pattern${patternProperties.length > 1 ? \"s\" : \"\"} ${patternProperties.map(pattern => JSON.stringify(pattern)).join(\" | \")}`);\n      }\n\n      const properties = schema.properties ? Object.keys(schema.properties) : [];\n      const required = schema.required ? schema.required : [];\n      const allProperties = [...new Set(\n      /** @type {Array<string>} */\n      [].concat(required).concat(properties))];\n      const objectStructure = allProperties.map(property => {\n        const isRequired = required.includes(property); // Some properties need quotes, maybe we should add check\n        // Maybe we should output type of property (`foo: string`), but it is looks very unreadable\n\n        return `${property}${isRequired ? \"\" : \"?\"}`;\n      }).concat(typeof schema.additionalProperties === \"undefined\" || Boolean(schema.additionalProperties) ? schema.additionalProperties && isObject(schema.additionalProperties) ? [`<key>: ${formatInnerSchema(schema.additionalProperties)}`] : [\"…\"] : []).join(\", \");\n      const {\n        dependencies,\n        propertyNames,\n        patternRequired\n      } =\n      /** @type {Schema & {patternRequired?: Array<string>;}} */\n      schema;\n\n      if (dependencies) {\n        Object.keys(dependencies).forEach(dependencyName => {\n          const dependency = dependencies[dependencyName];\n\n          if (Array.isArray(dependency)) {\n            hints.push(`should have ${dependency.length > 1 ? \"properties\" : \"property\"} ${dependency.map(dep => `'${dep}'`).join(\", \")} when property '${dependencyName}' is present`);\n          } else {\n            hints.push(`should be valid according to the schema ${formatInnerSchema(dependency)} when property '${dependencyName}' is present`);\n          }\n        });\n      }\n\n      if (propertyNames && Object.keys(propertyNames).length > 0) {\n        hints.push(`each property name should match format ${JSON.stringify(schema.propertyNames.format)}`);\n      }\n\n      if (patternRequired && patternRequired.length > 0) {\n        hints.push(`should have property matching pattern ${patternRequired.map(\n        /**\n         * @param {string} item\n         * @returns {string}\n         */\n        item => JSON.stringify(item))}`);\n      }\n\n      return `object {${objectStructure ? ` ${objectStructure} ` : \"\"}}${hints.length > 0 ? ` (${hints.join(\", \")})` : \"\"}`;\n    }\n\n    if (likeNull(schema)) {\n      return `${logic ? \"\" : \"non-\"}null`;\n    }\n\n    if (Array.isArray(schema.type)) {\n      // not logic already applied in formatValidationError\n      return `${schema.type.join(\" | \")}`;\n    } // Fallback for unknown keywords\n    // not logic already applied in formatValidationError\n\n    /* istanbul ignore next */\n\n\n    return JSON.stringify(schema, null, 2);\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @param {(boolean | Array<string>)=} additionalPath\n   * @param {boolean=} needDot\n   * @param {boolean=} logic\n   * @returns {string}\n   */\n\n\n  getSchemaPartText(schemaPart, additionalPath, needDot = false, logic = true) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    if (Array.isArray(additionalPath)) {\n      for (let i = 0; i < additionalPath.length; i++) {\n        /** @type {Schema | undefined} */\n        const inner = schemaPart[\n        /** @type {keyof Schema} */\n        additionalPath[i]];\n\n        if (inner) {\n          // eslint-disable-next-line no-param-reassign\n          schemaPart = inner;\n        } else {\n          break;\n        }\n      }\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = `${this.formatSchema(schemaPart, logic)}${needDot ? \".\" : \"\"}`;\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {Schema=} schemaPart\n   * @returns {string}\n   */\n\n\n  getSchemaPartDescription(schemaPart) {\n    if (!schemaPart) {\n      return \"\";\n    }\n\n    while (schemaPart.$ref) {\n      // eslint-disable-next-line no-param-reassign\n      schemaPart = this.getSchemaPart(schemaPart.$ref);\n    }\n\n    let schemaText = \"\";\n\n    if (schemaPart.description) {\n      schemaText += `\\n-> ${schemaPart.description}`;\n    }\n\n    if (schemaPart.link) {\n      schemaText += `\\n-> Read more at ${schemaPart.link}`;\n    }\n\n    return schemaText;\n  }\n  /**\n   * @param {SchemaUtilErrorObject} error\n   * @returns {string}\n   */\n\n\n  formatValidationError(error) {\n    const {\n      keyword,\n      dataPath: errorDataPath\n    } = error;\n    const dataPath = `${this.baseDataPath}${errorDataPath}`;\n\n    switch (keyword) {\n      case \"type\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error; // eslint-disable-next-line default-case\n\n          switch (\n          /** @type {import(\"ajv\").TypeParams} */\n          params.type) {\n            case \"number\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"integer\":\n              return `${dataPath} should be an ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"string\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"boolean\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            case \"array\":\n              return `${dataPath} should be an array:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"object\":\n              return `${dataPath} should be an object:\\n${this.getSchemaPartText(parentSchema)}`;\n\n            case \"null\":\n              return `${dataPath} should be a ${this.getSchemaPartText(parentSchema, false, true)}`;\n\n            default:\n              return `${dataPath} should be:\\n${this.getSchemaPartText(parentSchema)}`;\n          }\n        }\n\n      case \"instanceof\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be an instance of ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"pattern\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            pattern\n          } =\n          /** @type {import(\"ajv\").PatternParams} */\n          params;\n          return `${dataPath} should match pattern ${JSON.stringify(pattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"format\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            format\n          } =\n          /** @type {import(\"ajv\").FormatParams} */\n          params;\n          return `${dataPath} should match format ${JSON.stringify(format)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"formatMinimum\":\n      case \"formatMaximum\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          return `${dataPath} should be ${comparison} ${JSON.stringify(limit)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minimum\":\n      case \"maximum\":\n      case \"exclusiveMinimum\":\n      case \"exclusiveMaximum\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const {\n            comparison,\n            limit\n          } =\n          /** @type {import(\"ajv\").ComparisonParams} */\n          params;\n          const [, ...hints] = getHints(\n          /** @type {Schema} */\n          parentSchema, true);\n\n          if (hints.length === 0) {\n            hints.push(`should be ${comparison} ${limit}`);\n          }\n\n          return `${dataPath} ${hints.join(\" \")}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"multipleOf\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            multipleOf\n          } =\n          /** @type {import(\"ajv\").MultipleOfParams} */\n          params;\n          return `${dataPath} should be multiple of ${multipleOf}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"patternRequired\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            missingPattern\n          } =\n          /** @type {import(\"ajv\").PatternRequiredParams} */\n          params;\n          return `${dataPath} should have property matching pattern ${JSON.stringify(missingPattern)}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty string${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          const length = limit - 1;\n          return `${dataPath} should be longer than ${length} character${length > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty array${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"minProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n\n          if (limit === 1) {\n            return `${dataPath} should be a non-empty object${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n          }\n\n          return `${dataPath} should not have fewer than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxLength\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          const max = limit + 1;\n          return `${dataPath} should be shorter than ${max} character${max > 1 ? \"s\" : \"\"}${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"maxProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} properties${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"uniqueItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            i\n          } =\n          /** @type {import(\"ajv\").UniqueItemsParams} */\n          params;\n          return `${dataPath} should not contain the item '${error.data[i]}' twice${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalItems\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            limit\n          } =\n          /** @type {import(\"ajv\").LimitParams} */\n          params;\n          return `${dataPath} should not have more than ${limit} items${getSchemaNonTypes(parentSchema)}. These items are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"contains\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should contains at least one ${this.getSchemaPartText(parentSchema, [\"contains\"])} item${getSchemaNonTypes(parentSchema)}.`;\n        }\n\n      case \"required\":\n        {\n          const {\n            parentSchema,\n            params\n          } = error;\n          const missingProperty =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params.missingProperty.replace(/^\\./, \"\");\n          const hasProperty = parentSchema && Boolean(\n          /** @type {Schema} */\n          parentSchema.properties &&\n          /** @type {Schema} */\n          parentSchema.properties[missingProperty]);\n          return `${dataPath} misses the property '${missingProperty}'${getSchemaNonTypes(parentSchema)}.${hasProperty ? ` Should be:\\n${this.getSchemaPartText(parentSchema, [\"properties\", missingProperty])}` : this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"additionalProperties\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            additionalProperty\n          } =\n          /** @type {import(\"ajv\").AdditionalPropertiesParams} */\n          params;\n          return `${dataPath} has an unknown property '${additionalProperty}'${getSchemaNonTypes(parentSchema)}. These properties are valid:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"dependencies\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            property,\n            deps\n          } =\n          /** @type {import(\"ajv\").DependenciesParams} */\n          params;\n          const dependencies = deps.split(\",\").map(\n          /**\n           * @param {string} dep\n           * @returns {string}\n           */\n          dep => `'${dep.trim()}'`).join(\", \");\n          return `${dataPath} should have properties ${dependencies} when property '${property}' is present${getSchemaNonTypes(parentSchema)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"propertyNames\":\n        {\n          const {\n            params,\n            parentSchema,\n            schema\n          } = error;\n          const {\n            propertyName\n          } =\n          /** @type {import(\"ajv\").PropertyNamesParams} */\n          params;\n          return `${dataPath} property name '${propertyName}' is invalid${getSchemaNonTypes(parentSchema)}. Property names should be match format ${JSON.stringify(schema.format)}.${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      case \"enum\":\n        {\n          const {\n            parentSchema\n          } = error;\n\n          if (parentSchema &&\n          /** @type {Schema} */\n          parentSchema.enum &&\n          /** @type {Schema} */\n          parentSchema.enum.length === 1) {\n            return `${dataPath} should be ${this.getSchemaPartText(parentSchema, false, true)}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"const\":\n        {\n          const {\n            parentSchema\n          } = error;\n          return `${dataPath} should be equal to constant ${this.getSchemaPartText(parentSchema, false, true)}`;\n        }\n\n      case \"not\":\n        {\n          const postfix = likeObject(\n          /** @type {Schema} */\n          error.parentSchema) ? `\\n${this.getSchemaPartText(error.parentSchema)}` : \"\";\n          const schemaOutput = this.getSchemaPartText(error.schema, false, false, false);\n\n          if (canApplyNot(error.schema)) {\n            return `${dataPath} should be any ${schemaOutput}${postfix}.`;\n          }\n\n          const {\n            schema,\n            parentSchema\n          } = error;\n          return `${dataPath} should not be ${this.getSchemaPartText(schema, false, true)}${parentSchema && likeObject(parentSchema) ? `\\n${this.getSchemaPartText(parentSchema)}` : \"\"}`;\n        }\n\n      case \"oneOf\":\n      case \"anyOf\":\n        {\n          const {\n            parentSchema,\n            children\n          } = error;\n\n          if (children && children.length > 0) {\n            if (error.schema.length === 1) {\n              const lastChild = children[children.length - 1];\n              const remainingChildren = children.slice(0, children.length - 1);\n              return this.formatValidationError(Object.assign({}, lastChild, {\n                children: remainingChildren,\n                parentSchema: Object.assign({}, parentSchema, lastChild.parentSchema)\n              }));\n            }\n\n            let filteredChildren = filterChildren(children);\n\n            if (filteredChildren.length === 1) {\n              return this.formatValidationError(filteredChildren[0]);\n            }\n\n            filteredChildren = groupChildrenByFirstChild(filteredChildren);\n            return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}\\nDetails:\\n${filteredChildren.map(\n            /**\n             * @param {SchemaUtilErrorObject} nestedError\n             * @returns {string}\n             */\n            nestedError => ` * ${indent(this.formatValidationError(nestedError), \"   \")}`).join(\"\\n\")}`;\n          }\n\n          return `${dataPath} should be one of these:\\n${this.getSchemaPartText(parentSchema)}`;\n        }\n\n      case \"if\":\n        {\n          const {\n            params,\n            parentSchema\n          } = error;\n          const {\n            failingKeyword\n          } =\n          /** @type {import(\"ajv\").IfParams} */\n          params;\n          return `${dataPath} should match \"${failingKeyword}\" schema:\\n${this.getSchemaPartText(parentSchema, [failingKeyword])}`;\n        }\n\n      case \"absolutePath\":\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          return `${dataPath}: ${message}${this.getSchemaPartDescription(parentSchema)}`;\n        }\n\n      /* istanbul ignore next */\n\n      default:\n        {\n          const {\n            message,\n            parentSchema\n          } = error;\n          const ErrorInJSON = JSON.stringify(error, null, 2); // For `custom`, `false schema`, `$ref` keywords\n          // Fallback for unknown keywords\n\n          return `${dataPath} ${message} (${ErrorInJSON}).\\n${this.getSchemaPartText(parentSchema, false)}`;\n        }\n    }\n  }\n  /**\n   * @param {Array<SchemaUtilErrorObject>} errors\n   * @returns {string}\n   */\n\n\n  formatValidationErrors(errors) {\n    return errors.map(error => {\n      let formattedError = this.formatValidationError(error);\n\n      if (this.postFormatter) {\n        formattedError = this.postFormatter(formattedError, error);\n      }\n\n      return ` - ${indent(formattedError, \"   \")}`;\n    }).join(\"\\n\");\n  }\n\n}\n\nvar _default = ValidationError;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}