{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nrequire(\"core-js/modules/es.json.stringify.js\");\n\nvar Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  var hints = [];\n  var type = \"string\";\n\n  var currentSchema = _objectSpread({}, schema);\n\n  if (!logic) {\n    var tmpLength = currentSchema.minLength;\n    var tmpFormat = currentSchema.formatMinimum;\n    var tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      var length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(\"should be longer than \".concat(length, \" character\").concat(length > 1 ? \"s\" : \"\"));\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      var _length = currentSchema.maxLength + 1;\n\n      hints.push(\"should be shorter than \".concat(_length, \" character\").concat(_length > 1 ? \"s\" : \"\"));\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" match pattern \").concat(JSON.stringify(currentSchema.pattern)));\n  }\n\n  if (currentSchema.format) {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" match format \").concat(JSON.stringify(currentSchema.format)));\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(\"should be \".concat(currentSchema.formatExclusiveMinimum ? \">\" : \">=\", \" \").concat(JSON.stringify(currentSchema.formatMinimum)));\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(\"should be \".concat(currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\", \" \").concat(JSON.stringify(currentSchema.formatMaximum)));\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  var hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  var range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  var rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(\"should\".concat(logic ? \"\" : \" not\", \" be multiple of \").concat(schema.multipleOf));\n  }\n\n  return hints;\n};","map":{"version":3,"names":["Range","require","module","exports","stringHints","schema","logic","hints","type","currentSchema","tmpLength","minLength","tmpFormat","formatMinimum","tmpExclusive","formatExclusiveMaximum","maxLength","formatMaximum","formatExclusiveMinimum","length","Math","max","push","pattern","JSON","stringify","format","concat","numberHints","range","minimum","left","exclusiveMinimum","maximum","right","exclusiveMaximum","rangeFormat","multipleOf"],"sources":["D:/Work/Project/LMS/lms/node_modules/terser-webpack-plugin/node_modules/schema-utils/dist/util/hints.js"],"sourcesContent":["\"use strict\";\n\nconst Range = require(\"./Range\");\n/** @typedef {import(\"../validate\").Schema} Schema */\n\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.stringHints = function stringHints(schema, logic) {\n  const hints = [];\n  let type = \"string\";\n  const currentSchema = { ...schema\n  };\n\n  if (!logic) {\n    const tmpLength = currentSchema.minLength;\n    const tmpFormat = currentSchema.formatMinimum;\n    const tmpExclusive = currentSchema.formatExclusiveMaximum;\n    currentSchema.minLength = currentSchema.maxLength;\n    currentSchema.maxLength = tmpLength;\n    currentSchema.formatMinimum = currentSchema.formatMaximum;\n    currentSchema.formatMaximum = tmpFormat;\n    currentSchema.formatExclusiveMaximum = !currentSchema.formatExclusiveMinimum;\n    currentSchema.formatExclusiveMinimum = !tmpExclusive;\n  }\n\n  if (typeof currentSchema.minLength === \"number\") {\n    if (currentSchema.minLength === 1) {\n      type = \"non-empty string\";\n    } else {\n      const length = Math.max(currentSchema.minLength - 1, 0);\n      hints.push(`should be longer than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (typeof currentSchema.maxLength === \"number\") {\n    if (currentSchema.maxLength === 0) {\n      type = \"empty string\";\n    } else {\n      const length = currentSchema.maxLength + 1;\n      hints.push(`should be shorter than ${length} character${length > 1 ? \"s\" : \"\"}`);\n    }\n  }\n\n  if (currentSchema.pattern) {\n    hints.push(`should${logic ? \"\" : \" not\"} match pattern ${JSON.stringify(currentSchema.pattern)}`);\n  }\n\n  if (currentSchema.format) {\n    hints.push(`should${logic ? \"\" : \" not\"} match format ${JSON.stringify(currentSchema.format)}`);\n  }\n\n  if (currentSchema.formatMinimum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMinimum ? \">\" : \">=\"} ${JSON.stringify(currentSchema.formatMinimum)}`);\n  }\n\n  if (currentSchema.formatMaximum) {\n    hints.push(`should be ${currentSchema.formatExclusiveMaximum ? \"<\" : \"<=\"} ${JSON.stringify(currentSchema.formatMaximum)}`);\n  }\n\n  return [type].concat(hints);\n};\n/**\n * @param {Schema} schema\n * @param {boolean} logic\n * @return {string[]}\n */\n\n\nmodule.exports.numberHints = function numberHints(schema, logic) {\n  const hints = [schema.type === \"integer\" ? \"integer\" : \"number\"];\n  const range = new Range();\n\n  if (typeof schema.minimum === \"number\") {\n    range.left(schema.minimum);\n  }\n\n  if (typeof schema.exclusiveMinimum === \"number\") {\n    range.left(schema.exclusiveMinimum, true);\n  }\n\n  if (typeof schema.maximum === \"number\") {\n    range.right(schema.maximum);\n  }\n\n  if (typeof schema.exclusiveMaximum === \"number\") {\n    range.right(schema.exclusiveMaximum, true);\n  }\n\n  const rangeFormat = range.format(logic);\n\n  if (rangeFormat) {\n    hints.push(rangeFormat);\n  }\n\n  if (typeof schema.multipleOf === \"number\") {\n    hints.push(`should${logic ? \"\" : \" not\"} be multiple of ${schema.multipleOf}`);\n  }\n\n  return hints;\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}