{"ast":null,"code":"/*\n  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\"use strict\";\n/* eslint-disable no-underscore-dangle */\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/es.string.iterator.js\");\n\nrequire(\"core-js/modules/es.weak-map.js\");\n\nrequire(\"core-js/modules/web.dom-collections.iterator.js\");\n\nvar Scope = require(\"./scope\");\n\nvar assert = require(\"assert\");\n\nvar GlobalScope = Scope.GlobalScope;\nvar CatchScope = Scope.CatchScope;\nvar WithScope = Scope.WithScope;\nvar ModuleScope = Scope.ModuleScope;\nvar ClassScope = Scope.ClassScope;\nvar SwitchScope = Scope.SwitchScope;\nvar FunctionScope = Scope.FunctionScope;\nvar ForScope = Scope.ForScope;\nvar FunctionExpressionNameScope = Scope.FunctionExpressionNameScope;\nvar BlockScope = Scope.BlockScope;\n/**\n * @class ScopeManager\n */\n\nvar ScopeManager = /*#__PURE__*/function () {\n  function ScopeManager(options) {\n    _classCallCheck(this, ScopeManager);\n\n    this.scopes = [];\n    this.globalScope = null;\n    this.__nodeToScope = new WeakMap();\n    this.__currentScope = null;\n    this.__options = options;\n    this.__declaredVariables = new WeakMap();\n  }\n\n  _createClass(ScopeManager, [{\n    key: \"__useDirective\",\n    value: function __useDirective() {\n      return this.__options.directive;\n    }\n  }, {\n    key: \"__isOptimistic\",\n    value: function __isOptimistic() {\n      return this.__options.optimistic;\n    }\n  }, {\n    key: \"__ignoreEval\",\n    value: function __ignoreEval() {\n      return this.__options.ignoreEval;\n    }\n  }, {\n    key: \"__isNodejsScope\",\n    value: function __isNodejsScope() {\n      return this.__options.nodejsScope;\n    }\n  }, {\n    key: \"isModule\",\n    value: function isModule() {\n      return this.__options.sourceType === \"module\";\n    }\n  }, {\n    key: \"isImpliedStrict\",\n    value: function isImpliedStrict() {\n      return this.__options.impliedStrict;\n    }\n  }, {\n    key: \"isStrictModeSupported\",\n    value: function isStrictModeSupported() {\n      return this.__options.ecmaVersion >= 5;\n    } // Returns appropriate scope for this node.\n\n  }, {\n    key: \"__get\",\n    value: function __get(node) {\n      return this.__nodeToScope.get(node);\n    }\n    /**\n     * Get variables that are declared by the node.\n     *\n     * \"are declared by the node\" means the node is same as `Variable.defs[].node` or `Variable.defs[].parent`.\n     * If the node declares nothing, this method returns an empty array.\n     * CAUTION: This API is experimental. See https://github.com/estools/escope/pull/69 for more details.\n     *\n     * @param {Espree.Node} node - a node to get.\n     * @returns {Variable[]} variables that declared by the node.\n     */\n\n  }, {\n    key: \"getDeclaredVariables\",\n    value: function getDeclaredVariables(node) {\n      return this.__declaredVariables.get(node) || [];\n    }\n    /**\n     * acquire scope from node.\n     * @method ScopeManager#acquire\n     * @param {Espree.Node} node - node for the acquired scope.\n     * @param {boolean=} inner - look up the most inner scope, default value is false.\n     * @returns {Scope?} Scope from node\n     */\n\n  }, {\n    key: \"acquire\",\n    value: function acquire(node, inner) {\n      /**\n       * predicate\n       * @param {Scope} testScope - scope to test\n       * @returns {boolean} predicate\n       */\n      function predicate(testScope) {\n        if (testScope.type === \"function\" && testScope.functionExpressionScope) {\n          return false;\n        }\n\n        return true;\n      }\n\n      var scopes = this.__get(node);\n\n      if (!scopes || scopes.length === 0) {\n        return null;\n      } // Heuristic selection from all scopes.\n      // If you would like to get all scopes, please use ScopeManager#acquireAll.\n\n\n      if (scopes.length === 1) {\n        return scopes[0];\n      }\n\n      if (inner) {\n        for (var i = scopes.length - 1; i >= 0; --i) {\n          var scope = scopes[i];\n\n          if (predicate(scope)) {\n            return scope;\n          }\n        }\n      } else {\n        for (var _i = 0, iz = scopes.length; _i < iz; ++_i) {\n          var _scope = scopes[_i];\n\n          if (predicate(_scope)) {\n            return _scope;\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * acquire all scopes from node.\n     * @method ScopeManager#acquireAll\n     * @param {Espree.Node} node - node for the acquired scope.\n     * @returns {Scopes?} Scope array\n     */\n\n  }, {\n    key: \"acquireAll\",\n    value: function acquireAll(node) {\n      return this.__get(node);\n    }\n    /**\n     * release the node.\n     * @method ScopeManager#release\n     * @param {Espree.Node} node - releasing node.\n     * @param {boolean=} inner - look up the most inner scope, default value is false.\n     * @returns {Scope?} upper scope for the node.\n     */\n\n  }, {\n    key: \"release\",\n    value: function release(node, inner) {\n      var scopes = this.__get(node);\n\n      if (scopes && scopes.length) {\n        var scope = scopes[0].upper;\n\n        if (!scope) {\n          return null;\n        }\n\n        return this.acquire(scope.block, inner);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach() {} // eslint-disable-line class-methods-use-this\n\n  }, {\n    key: \"detach\",\n    value: function detach() {} // eslint-disable-line class-methods-use-this\n\n  }, {\n    key: \"__nestScope\",\n    value: function __nestScope(scope) {\n      if (scope instanceof GlobalScope) {\n        assert(this.__currentScope === null);\n        this.globalScope = scope;\n      }\n\n      this.__currentScope = scope;\n      return scope;\n    }\n  }, {\n    key: \"__nestGlobalScope\",\n    value: function __nestGlobalScope(node) {\n      return this.__nestScope(new GlobalScope(this, node));\n    }\n  }, {\n    key: \"__nestBlockScope\",\n    value: function __nestBlockScope(node) {\n      return this.__nestScope(new BlockScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestFunctionScope\",\n    value: function __nestFunctionScope(node, isMethodDefinition) {\n      return this.__nestScope(new FunctionScope(this, this.__currentScope, node, isMethodDefinition));\n    }\n  }, {\n    key: \"__nestForScope\",\n    value: function __nestForScope(node) {\n      return this.__nestScope(new ForScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestCatchScope\",\n    value: function __nestCatchScope(node) {\n      return this.__nestScope(new CatchScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestWithScope\",\n    value: function __nestWithScope(node) {\n      return this.__nestScope(new WithScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestClassScope\",\n    value: function __nestClassScope(node) {\n      return this.__nestScope(new ClassScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestSwitchScope\",\n    value: function __nestSwitchScope(node) {\n      return this.__nestScope(new SwitchScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestModuleScope\",\n    value: function __nestModuleScope(node) {\n      return this.__nestScope(new ModuleScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__nestFunctionExpressionNameScope\",\n    value: function __nestFunctionExpressionNameScope(node) {\n      return this.__nestScope(new FunctionExpressionNameScope(this, this.__currentScope, node));\n    }\n  }, {\n    key: \"__isES6\",\n    value: function __isES6() {\n      return this.__options.ecmaVersion >= 6;\n    }\n  }]);\n\n  return ScopeManager;\n}();\n\nmodule.exports = ScopeManager;\n/* vim: set sw=4 ts=4 et tw=80 : */","map":{"version":3,"names":["Scope","require","assert","GlobalScope","CatchScope","WithScope","ModuleScope","ClassScope","SwitchScope","FunctionScope","ForScope","FunctionExpressionNameScope","BlockScope","ScopeManager","options","scopes","globalScope","__nodeToScope","WeakMap","__currentScope","__options","__declaredVariables","directive","optimistic","ignoreEval","nodejsScope","sourceType","impliedStrict","ecmaVersion","node","get","inner","predicate","testScope","type","functionExpressionScope","__get","length","i","scope","iz","upper","acquire","block","__nestScope","isMethodDefinition","module","exports"],"sources":["D:/Work/Project/LMS/lms/node_modules/eslint-scope/lib/scope-manager.js"],"sourcesContent":["/*\n  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions are met:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n*/\n\"use strict\";\n\n/* eslint-disable no-underscore-dangle */\n\nconst Scope = require(\"./scope\");\nconst assert = require(\"assert\");\n\nconst GlobalScope = Scope.GlobalScope;\nconst CatchScope = Scope.CatchScope;\nconst WithScope = Scope.WithScope;\nconst ModuleScope = Scope.ModuleScope;\nconst ClassScope = Scope.ClassScope;\nconst SwitchScope = Scope.SwitchScope;\nconst FunctionScope = Scope.FunctionScope;\nconst ForScope = Scope.ForScope;\nconst FunctionExpressionNameScope = Scope.FunctionExpressionNameScope;\nconst BlockScope = Scope.BlockScope;\n\n/**\n * @class ScopeManager\n */\nclass ScopeManager {\n    constructor(options) {\n        this.scopes = [];\n        this.globalScope = null;\n        this.__nodeToScope = new WeakMap();\n        this.__currentScope = null;\n        this.__options = options;\n        this.__declaredVariables = new WeakMap();\n    }\n\n    __useDirective() {\n        return this.__options.directive;\n    }\n\n    __isOptimistic() {\n        return this.__options.optimistic;\n    }\n\n    __ignoreEval() {\n        return this.__options.ignoreEval;\n    }\n\n    __isNodejsScope() {\n        return this.__options.nodejsScope;\n    }\n\n    isModule() {\n        return this.__options.sourceType === \"module\";\n    }\n\n    isImpliedStrict() {\n        return this.__options.impliedStrict;\n    }\n\n    isStrictModeSupported() {\n        return this.__options.ecmaVersion >= 5;\n    }\n\n    // Returns appropriate scope for this node.\n    __get(node) {\n        return this.__nodeToScope.get(node);\n    }\n\n    /**\n     * Get variables that are declared by the node.\n     *\n     * \"are declared by the node\" means the node is same as `Variable.defs[].node` or `Variable.defs[].parent`.\n     * If the node declares nothing, this method returns an empty array.\n     * CAUTION: This API is experimental. See https://github.com/estools/escope/pull/69 for more details.\n     *\n     * @param {Espree.Node} node - a node to get.\n     * @returns {Variable[]} variables that declared by the node.\n     */\n    getDeclaredVariables(node) {\n        return this.__declaredVariables.get(node) || [];\n    }\n\n    /**\n     * acquire scope from node.\n     * @method ScopeManager#acquire\n     * @param {Espree.Node} node - node for the acquired scope.\n     * @param {boolean=} inner - look up the most inner scope, default value is false.\n     * @returns {Scope?} Scope from node\n     */\n    acquire(node, inner) {\n\n        /**\n         * predicate\n         * @param {Scope} testScope - scope to test\n         * @returns {boolean} predicate\n         */\n        function predicate(testScope) {\n            if (testScope.type === \"function\" && testScope.functionExpressionScope) {\n                return false;\n            }\n            return true;\n        }\n\n        const scopes = this.__get(node);\n\n        if (!scopes || scopes.length === 0) {\n            return null;\n        }\n\n        // Heuristic selection from all scopes.\n        // If you would like to get all scopes, please use ScopeManager#acquireAll.\n        if (scopes.length === 1) {\n            return scopes[0];\n        }\n\n        if (inner) {\n            for (let i = scopes.length - 1; i >= 0; --i) {\n                const scope = scopes[i];\n\n                if (predicate(scope)) {\n                    return scope;\n                }\n            }\n        } else {\n            for (let i = 0, iz = scopes.length; i < iz; ++i) {\n                const scope = scopes[i];\n\n                if (predicate(scope)) {\n                    return scope;\n                }\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * acquire all scopes from node.\n     * @method ScopeManager#acquireAll\n     * @param {Espree.Node} node - node for the acquired scope.\n     * @returns {Scopes?} Scope array\n     */\n    acquireAll(node) {\n        return this.__get(node);\n    }\n\n    /**\n     * release the node.\n     * @method ScopeManager#release\n     * @param {Espree.Node} node - releasing node.\n     * @param {boolean=} inner - look up the most inner scope, default value is false.\n     * @returns {Scope?} upper scope for the node.\n     */\n    release(node, inner) {\n        const scopes = this.__get(node);\n\n        if (scopes && scopes.length) {\n            const scope = scopes[0].upper;\n\n            if (!scope) {\n                return null;\n            }\n            return this.acquire(scope.block, inner);\n        }\n        return null;\n    }\n\n    attach() { } // eslint-disable-line class-methods-use-this\n\n    detach() { } // eslint-disable-line class-methods-use-this\n\n    __nestScope(scope) {\n        if (scope instanceof GlobalScope) {\n            assert(this.__currentScope === null);\n            this.globalScope = scope;\n        }\n        this.__currentScope = scope;\n        return scope;\n    }\n\n    __nestGlobalScope(node) {\n        return this.__nestScope(new GlobalScope(this, node));\n    }\n\n    __nestBlockScope(node) {\n        return this.__nestScope(new BlockScope(this, this.__currentScope, node));\n    }\n\n    __nestFunctionScope(node, isMethodDefinition) {\n        return this.__nestScope(new FunctionScope(this, this.__currentScope, node, isMethodDefinition));\n    }\n\n    __nestForScope(node) {\n        return this.__nestScope(new ForScope(this, this.__currentScope, node));\n    }\n\n    __nestCatchScope(node) {\n        return this.__nestScope(new CatchScope(this, this.__currentScope, node));\n    }\n\n    __nestWithScope(node) {\n        return this.__nestScope(new WithScope(this, this.__currentScope, node));\n    }\n\n    __nestClassScope(node) {\n        return this.__nestScope(new ClassScope(this, this.__currentScope, node));\n    }\n\n    __nestSwitchScope(node) {\n        return this.__nestScope(new SwitchScope(this, this.__currentScope, node));\n    }\n\n    __nestModuleScope(node) {\n        return this.__nestScope(new ModuleScope(this, this.__currentScope, node));\n    }\n\n    __nestFunctionExpressionNameScope(node) {\n        return this.__nestScope(new FunctionExpressionNameScope(this, this.__currentScope, node));\n    }\n\n    __isES6() {\n        return this.__options.ecmaVersion >= 6;\n    }\n}\n\nmodule.exports = ScopeManager;\n\n/* vim: set sw=4 ts=4 et tw=80 : */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}