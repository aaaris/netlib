{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _objectSpread = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/objectSpread2.js\")[\"default\"];\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.array.is-array.js\");\n\nrequire(\"core-js/modules/es.array.slice.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.string.starts-with.js\");\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.string.substr.js\");\n\nvar forEachBail = require(\"./forEachBail\");\n\nvar _require = require(\"./util/path\"),\n    PathType = _require.PathType,\n    getType = _require.getType;\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\n/** @typedef {{alias: string|Array<string>|false, name: string, onlyModule?: boolean}} AliasOption */\n\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {AliasOption | Array<AliasOption>} options options\n   * @param {string | ResolveStepHook} target target\n   */\n  function AliasPlugin(source, options, target) {\n    _classCallCheck(this, AliasPlugin);\n\n    this.source = source;\n    this.options = Array.isArray(options) ? options : [options];\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(AliasPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var _this = this;\n\n      var target = resolver.ensureHook(this.target);\n\n      var getAbsolutePathWithSlashEnding = function getAbsolutePathWithSlashEnding(maybeAbsolutePath) {\n        var type = getType(maybeAbsolutePath);\n\n        if (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {\n          return resolver.join(maybeAbsolutePath, \"_\").slice(0, -1);\n        }\n\n        return null;\n      };\n\n      var isSubPath = function isSubPath(path, maybeSubPath) {\n        var absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);\n        if (!absolutePath) return false;\n        return path.startsWith(absolutePath);\n      };\n\n      resolver.getHook(this.source).tapAsync(\"AliasPlugin\", function (request, resolveContext, callback) {\n        var innerRequest = request.request || request.path;\n        if (!innerRequest) return callback();\n        forEachBail(_this.options, function (item, callback) {\n          var shouldStop = false;\n\n          if (innerRequest === item.name || !item.onlyModule && (request.request ? innerRequest.startsWith(\"\".concat(item.name, \"/\")) : isSubPath(innerRequest, item.name))) {\n            var remainingRequest = innerRequest.substr(item.name.length);\n\n            var resolveWithAlias = function resolveWithAlias(alias, callback) {\n              if (alias === false) {\n                /** @type {ResolveRequest} */\n                var ignoreObj = _objectSpread(_objectSpread({}, request), {}, {\n                  path: false\n                });\n\n                if (typeof resolveContext[\"yield\"] === \"function\") {\n                  resolveContext[\"yield\"](ignoreObj);\n                  return callback(null, null);\n                }\n\n                return callback(null, ignoreObj);\n              }\n\n              if (innerRequest !== alias && !innerRequest.startsWith(alias + \"/\")) {\n                shouldStop = true;\n                var newRequestStr = alias + remainingRequest;\n\n                var obj = _objectSpread(_objectSpread({}, request), {}, {\n                  request: newRequestStr,\n                  fullySpecified: false\n                });\n\n                return resolver.doResolve(target, obj, \"aliased with mapping '\" + item.name + \"': '\" + alias + \"' to '\" + newRequestStr + \"'\", resolveContext, function (err, result) {\n                  if (err) return callback(err);\n                  if (result) return callback(null, result);\n                  return callback();\n                });\n              }\n\n              return callback();\n            };\n\n            var stoppingCallback = function stoppingCallback(err, result) {\n              if (err) return callback(err);\n              if (result) return callback(null, result); // Don't allow other aliasing or raw request\n\n              if (shouldStop) return callback(null, null);\n              return callback();\n            };\n\n            if (Array.isArray(item.alias)) {\n              return forEachBail(item.alias, resolveWithAlias, stoppingCallback);\n            } else {\n              return resolveWithAlias(item.alias, stoppingCallback);\n            }\n          }\n\n          return callback();\n        }, callback);\n      });\n    }\n  }]);\n\n  return AliasPlugin;\n}();","map":{"version":3,"names":["forEachBail","require","PathType","getType","module","exports","source","options","target","Array","isArray","resolver","ensureHook","getAbsolutePathWithSlashEnding","maybeAbsolutePath","type","AbsolutePosix","AbsoluteWin","join","slice","isSubPath","path","maybeSubPath","absolutePath","startsWith","getHook","tapAsync","request","resolveContext","callback","innerRequest","item","shouldStop","name","onlyModule","remainingRequest","substr","length","resolveWithAlias","alias","ignoreObj","newRequestStr","obj","fullySpecified","doResolve","err","result","stoppingCallback"],"sources":["D:/Work/Project/LMS/lms/node_modules/enhanced-resolve/lib/AliasPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\nconst { PathType, getType } = require(\"./util/path\");\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveRequest} ResolveRequest */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n/** @typedef {{alias: string|Array<string>|false, name: string, onlyModule?: boolean}} AliasOption */\n\nmodule.exports = class AliasPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {AliasOption | Array<AliasOption>} options options\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, options, target) {\n\t\tthis.source = source;\n\t\tthis.options = Array.isArray(options) ? options : [options];\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst getAbsolutePathWithSlashEnding = maybeAbsolutePath => {\n\t\t\tconst type = getType(maybeAbsolutePath);\n\t\t\tif (type === PathType.AbsolutePosix || type === PathType.AbsoluteWin) {\n\t\t\t\treturn resolver.join(maybeAbsolutePath, \"_\").slice(0, -1);\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\tconst isSubPath = (path, maybeSubPath) => {\n\t\t\tconst absolutePath = getAbsolutePathWithSlashEnding(maybeSubPath);\n\t\t\tif (!absolutePath) return false;\n\t\t\treturn path.startsWith(absolutePath);\n\t\t};\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"AliasPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst innerRequest = request.request || request.path;\n\t\t\t\tif (!innerRequest) return callback();\n\t\t\t\tforEachBail(\n\t\t\t\t\tthis.options,\n\t\t\t\t\t(item, callback) => {\n\t\t\t\t\t\tlet shouldStop = false;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tinnerRequest === item.name ||\n\t\t\t\t\t\t\t(!item.onlyModule &&\n\t\t\t\t\t\t\t\t(request.request\n\t\t\t\t\t\t\t\t\t? innerRequest.startsWith(`${item.name}/`)\n\t\t\t\t\t\t\t\t\t: isSubPath(innerRequest, item.name)))\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst remainingRequest = innerRequest.substr(item.name.length);\n\t\t\t\t\t\t\tconst resolveWithAlias = (alias, callback) => {\n\t\t\t\t\t\t\t\tif (alias === false) {\n\t\t\t\t\t\t\t\t\t/** @type {ResolveRequest} */\n\t\t\t\t\t\t\t\t\tconst ignoreObj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\tpath: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\tif (typeof resolveContext.yield === \"function\") {\n\t\t\t\t\t\t\t\t\t\tresolveContext.yield(ignoreObj);\n\t\t\t\t\t\t\t\t\t\treturn callback(null, null);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn callback(null, ignoreObj);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tinnerRequest !== alias &&\n\t\t\t\t\t\t\t\t\t!innerRequest.startsWith(alias + \"/\")\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tshouldStop = true;\n\t\t\t\t\t\t\t\t\tconst newRequestStr = alias + remainingRequest;\n\t\t\t\t\t\t\t\t\tconst obj = {\n\t\t\t\t\t\t\t\t\t\t...request,\n\t\t\t\t\t\t\t\t\t\trequest: newRequestStr,\n\t\t\t\t\t\t\t\t\t\tfullySpecified: false\n\t\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\t\treturn resolver.doResolve(\n\t\t\t\t\t\t\t\t\t\ttarget,\n\t\t\t\t\t\t\t\t\t\tobj,\n\t\t\t\t\t\t\t\t\t\t\"aliased with mapping '\" +\n\t\t\t\t\t\t\t\t\t\t\titem.name +\n\t\t\t\t\t\t\t\t\t\t\t\"': '\" +\n\t\t\t\t\t\t\t\t\t\t\talias +\n\t\t\t\t\t\t\t\t\t\t\t\"' to '\" +\n\t\t\t\t\t\t\t\t\t\t\tnewRequestStr +\n\t\t\t\t\t\t\t\t\t\t\t\"'\",\n\t\t\t\t\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\t\t\t\t\t(err, result) => {\n\t\t\t\t\t\t\t\t\t\t\tif (err) return callback(err);\n\t\t\t\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tconst stoppingCallback = (err, result) => {\n\t\t\t\t\t\t\t\tif (err) return callback(err);\n\n\t\t\t\t\t\t\t\tif (result) return callback(null, result);\n\t\t\t\t\t\t\t\t// Don't allow other aliasing or raw request\n\t\t\t\t\t\t\t\tif (shouldStop) return callback(null, null);\n\t\t\t\t\t\t\t\treturn callback();\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\tif (Array.isArray(item.alias)) {\n\t\t\t\t\t\t\t\treturn forEachBail(\n\t\t\t\t\t\t\t\t\titem.alias,\n\t\t\t\t\t\t\t\t\tresolveWithAlias,\n\t\t\t\t\t\t\t\t\tstoppingCallback\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn resolveWithAlias(item.alias, stoppingCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t},\n\t\t\t\t\tcallback\n\t\t\t\t);\n\t\t\t});\n\t}\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}