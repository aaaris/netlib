{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/toConsumableArray.js\")[\"default\"];\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.object.define-property.js\");\n\nrequire(\"core-js/modules/es.array.concat.js\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\n\n\nvar PriorityQueue = /*#__PURE__*/function () {\n  function PriorityQueue(_computePriority) {\n    _classCallCheck(this, PriorityQueue);\n\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n\n    this._computePriority = _computePriority;\n  }\n\n  _createClass(PriorityQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(task, workerId) {\n      if (workerId == null) {\n        this._enqueue(task, this._sharedQueue);\n      } else {\n        var queue = this._getWorkerQueue(workerId);\n\n        this._enqueue(task, queue);\n      }\n    }\n  }, {\n    key: \"_enqueue\",\n    value: function _enqueue(task, queue) {\n      var item = {\n        priority: this._computePriority.apply(this, [task.request[2]].concat(_toConsumableArray(task.request[3]))),\n        task: task\n      };\n      queue.add(item);\n    }\n  }, {\n    key: \"dequeue\",\n    value: function dequeue(workerId) {\n      var workerQueue = this._getWorkerQueue(workerId);\n\n      var workerTop = workerQueue.peek();\n\n      var sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n      // or if the priority of the worker queue is smaller or equal to the\n      // priority of the top task in the shared queue. The tasks of the\n      // worker specific queue are preferred because no other worker can pick this\n      // specific task up.\n\n\n      if (sharedTop == null || workerTop != null && workerTop.priority <= sharedTop.priority) {\n        var _workerQueue$poll$tas, _workerQueue$poll;\n\n        return (_workerQueue$poll$tas = (_workerQueue$poll = workerQueue.poll()) === null || _workerQueue$poll === void 0 ? void 0 : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0 ? _workerQueue$poll$tas : null;\n      }\n\n      return this._sharedQueue.poll().task;\n    }\n  }, {\n    key: \"_getWorkerQueue\",\n    value: function _getWorkerQueue(workerId) {\n      var queue = this._queue[workerId];\n\n      if (queue == null) {\n        queue = this._queue[workerId] = new MinHeap();\n      }\n\n      return queue;\n    }\n  }]);\n\n  return PriorityQueue;\n}();\n\nexports[\"default\"] = PriorityQueue;\n\nvar MinHeap = /*#__PURE__*/function () {\n  function MinHeap() {\n    _classCallCheck(this, MinHeap);\n\n    _defineProperty(this, '_heap', []);\n  }\n\n  _createClass(MinHeap, [{\n    key: \"peek\",\n    value: function peek() {\n      var _this$_heap$;\n\n      return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0 ? _this$_heap$ : null;\n    }\n  }, {\n    key: \"add\",\n    value: function add(item) {\n      var nodes = this._heap;\n      nodes.push(item);\n\n      if (nodes.length === 1) {\n        return;\n      }\n\n      var currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n      while (currentIndex > 0) {\n        var parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n        var parent = nodes[parentIndex];\n\n        if (parent.priority <= item.priority) {\n          break;\n        }\n\n        nodes[currentIndex] = parent;\n        nodes[parentIndex] = item;\n        currentIndex = parentIndex;\n      }\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      var nodes = this._heap;\n      var result = nodes[0];\n      var lastElement = nodes.pop(); // heap was empty or removed the last element\n\n      if (result == null || nodes.length === 0) {\n        return result !== null && result !== void 0 ? result : null;\n      }\n\n      var index = 0;\n      nodes[0] = lastElement !== null && lastElement !== void 0 ? lastElement : null;\n      var element = nodes[0];\n\n      while (true) {\n        var swapIndex = null;\n        var rightChildIndex = (index + 1) * 2;\n        var leftChildIndex = rightChildIndex - 1;\n        var rightChild = nodes[rightChildIndex];\n        var leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n        if (leftChild != null && leftChild.priority < element.priority) {\n          swapIndex = leftChildIndex;\n        } // If the right child is smaller or the right child is smaller than the left\n        // then swap with the right child\n\n\n        if (rightChild != null && rightChild.priority < (swapIndex == null ? element : leftChild).priority) {\n          swapIndex = rightChildIndex;\n        }\n\n        if (swapIndex == null) {\n          break;\n        }\n\n        nodes[index] = nodes[swapIndex];\n        nodes[swapIndex] = element;\n        index = swapIndex;\n      }\n\n      return result;\n    }\n  }]);\n\n  return MinHeap;\n}();","map":{"version":3,"names":["Object","defineProperty","exports","value","_defineProperty","obj","key","enumerable","configurable","writable","PriorityQueue","_computePriority","MinHeap","task","workerId","_enqueue","_sharedQueue","queue","_getWorkerQueue","item","priority","request","add","workerQueue","workerTop","peek","sharedTop","_workerQueue$poll$tas","_workerQueue$poll","poll","_queue","_this$_heap$","_heap","nodes","push","length","currentIndex","parentIndex","Math","floor","parent","result","lastElement","pop","index","element","swapIndex","rightChildIndex","leftChildIndex","rightChild","leftChild"],"sources":["D:/Work/Project/LMS/lms/node_modules/jest-worker/build/PriorityQueue.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Priority queue that processes tasks in natural ordering (lower priority first)\n * accoridng to the priority computed by the function passed in the constructor.\n *\n * FIFO ordering isn't guaranteed for tasks with the same priority.\n *\n * Worker specific tasks with the same priority as a non-worker specific task\n * are always processed first.\n */\nclass PriorityQueue {\n  constructor(_computePriority) {\n    _defineProperty(this, '_queue', []);\n\n    _defineProperty(this, '_sharedQueue', new MinHeap());\n\n    this._computePriority = _computePriority;\n  }\n\n  enqueue(task, workerId) {\n    if (workerId == null) {\n      this._enqueue(task, this._sharedQueue);\n    } else {\n      const queue = this._getWorkerQueue(workerId);\n\n      this._enqueue(task, queue);\n    }\n  }\n\n  _enqueue(task, queue) {\n    const item = {\n      priority: this._computePriority(task.request[2], ...task.request[3]),\n      task\n    };\n    queue.add(item);\n  }\n\n  dequeue(workerId) {\n    const workerQueue = this._getWorkerQueue(workerId);\n\n    const workerTop = workerQueue.peek();\n\n    const sharedTop = this._sharedQueue.peek(); // use the task from the worker queue if there's no task in the shared queue\n    // or if the priority of the worker queue is smaller or equal to the\n    // priority of the top task in the shared queue. The tasks of the\n    // worker specific queue are preferred because no other worker can pick this\n    // specific task up.\n\n    if (\n      sharedTop == null ||\n      (workerTop != null && workerTop.priority <= sharedTop.priority)\n    ) {\n      var _workerQueue$poll$tas, _workerQueue$poll;\n\n      return (_workerQueue$poll$tas =\n        (_workerQueue$poll = workerQueue.poll()) === null ||\n        _workerQueue$poll === void 0\n          ? void 0\n          : _workerQueue$poll.task) !== null && _workerQueue$poll$tas !== void 0\n        ? _workerQueue$poll$tas\n        : null;\n    }\n\n    return this._sharedQueue.poll().task;\n  }\n\n  _getWorkerQueue(workerId) {\n    let queue = this._queue[workerId];\n\n    if (queue == null) {\n      queue = this._queue[workerId] = new MinHeap();\n    }\n\n    return queue;\n  }\n}\n\nexports.default = PriorityQueue;\n\nclass MinHeap {\n  constructor() {\n    _defineProperty(this, '_heap', []);\n  }\n\n  peek() {\n    var _this$_heap$;\n\n    return (_this$_heap$ = this._heap[0]) !== null && _this$_heap$ !== void 0\n      ? _this$_heap$\n      : null;\n  }\n\n  add(item) {\n    const nodes = this._heap;\n    nodes.push(item);\n\n    if (nodes.length === 1) {\n      return;\n    }\n\n    let currentIndex = nodes.length - 1; // Bubble up the added node as long as the parent is bigger\n\n    while (currentIndex > 0) {\n      const parentIndex = Math.floor((currentIndex + 1) / 2) - 1;\n      const parent = nodes[parentIndex];\n\n      if (parent.priority <= item.priority) {\n        break;\n      }\n\n      nodes[currentIndex] = parent;\n      nodes[parentIndex] = item;\n      currentIndex = parentIndex;\n    }\n  }\n\n  poll() {\n    const nodes = this._heap;\n    const result = nodes[0];\n    const lastElement = nodes.pop(); // heap was empty or removed the last element\n\n    if (result == null || nodes.length === 0) {\n      return result !== null && result !== void 0 ? result : null;\n    }\n\n    let index = 0;\n    nodes[0] =\n      lastElement !== null && lastElement !== void 0 ? lastElement : null;\n    const element = nodes[0];\n\n    while (true) {\n      let swapIndex = null;\n      const rightChildIndex = (index + 1) * 2;\n      const leftChildIndex = rightChildIndex - 1;\n      const rightChild = nodes[rightChildIndex];\n      const leftChild = nodes[leftChildIndex]; // if the left child is smaller, swap with the left\n\n      if (leftChild != null && leftChild.priority < element.priority) {\n        swapIndex = leftChildIndex;\n      } // If the right child is smaller or the right child is smaller than the left\n      // then swap with the right child\n\n      if (\n        rightChild != null &&\n        rightChild.priority < (swapIndex == null ? element : leftChild).priority\n      ) {\n        swapIndex = rightChildIndex;\n      }\n\n      if (swapIndex == null) {\n        break;\n      }\n\n      nodes[index] = nodes[swapIndex];\n      nodes[swapIndex] = element;\n      index = swapIndex;\n    }\n\n    return result;\n  }\n}\n"],"mappings":"AAAA;;;;;;;;;;;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAC3CC,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,WAAP,GAAkB,KAAK,CAAvB;;AAEA,SAASE,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCH,KAAnC,EAA0C;EACxC,IAAIG,GAAG,IAAID,GAAX,EAAgB;IACdL,MAAM,CAACC,cAAP,CAAsBI,GAAtB,EAA2BC,GAA3B,EAAgC;MAC9BH,KAAK,EAAEA,KADuB;MAE9BI,UAAU,EAAE,IAFkB;MAG9BC,YAAY,EAAE,IAHgB;MAI9BC,QAAQ,EAAE;IAJoB,CAAhC;EAMD,CAPD,MAOO;IACLJ,GAAG,CAACC,GAAD,CAAH,GAAWH,KAAX;EACD;;EACD,OAAOE,GAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;IACMK,a;EACJ,uBAAYC,gBAAZ,EAA8B;IAAA;;IAC5BP,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,EAAjB,CAAf;;IAEAA,eAAe,CAAC,IAAD,EAAO,cAAP,EAAuB,IAAIQ,OAAJ,EAAvB,CAAf;;IAEA,KAAKD,gBAAL,GAAwBA,gBAAxB;EACD;;;;WAED,iBAAQE,IAAR,EAAcC,QAAd,EAAwB;MACtB,IAAIA,QAAQ,IAAI,IAAhB,EAAsB;QACpB,KAAKC,QAAL,CAAcF,IAAd,EAAoB,KAAKG,YAAzB;MACD,CAFD,MAEO;QACL,IAAMC,KAAK,GAAG,KAAKC,eAAL,CAAqBJ,QAArB,CAAd;;QAEA,KAAKC,QAAL,CAAcF,IAAd,EAAoBI,KAApB;MACD;IACF;;;WAED,kBAASJ,IAAT,EAAeI,KAAf,EAAsB;MACpB,IAAME,IAAI,GAAG;QACXC,QAAQ,EAAE,KAAKT,gBAAL,cAAsBE,IAAI,CAACQ,OAAL,CAAa,CAAb,CAAtB,4BAA0CR,IAAI,CAACQ,OAAL,CAAa,CAAb,CAA1C,GADC;QAEXR,IAAI,EAAJA;MAFW,CAAb;MAIAI,KAAK,CAACK,GAAN,CAAUH,IAAV;IACD;;;WAED,iBAAQL,QAAR,EAAkB;MAChB,IAAMS,WAAW,GAAG,KAAKL,eAAL,CAAqBJ,QAArB,CAApB;;MAEA,IAAMU,SAAS,GAAGD,WAAW,CAACE,IAAZ,EAAlB;;MAEA,IAAMC,SAAS,GAAG,KAAKV,YAAL,CAAkBS,IAAlB,EAAlB,CALgB,CAK4B;MAC5C;MACA;MACA;MACA;;;MAEA,IACEC,SAAS,IAAI,IAAb,IACCF,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAACJ,QAAV,IAAsBM,SAAS,CAACN,QAFxD,EAGE;QACA,IAAIO,qBAAJ,EAA2BC,iBAA3B;;QAEA,OAAO,CAACD,qBAAqB,GAC3B,CAACC,iBAAiB,GAAGL,WAAW,CAACM,IAAZ,EAArB,MAA6C,IAA7C,IACAD,iBAAiB,KAAK,KAAK,CAD3B,GAEI,KAAK,CAFT,GAGIA,iBAAiB,CAACf,IAJjB,MAI2B,IAJ3B,IAImCc,qBAAqB,KAAK,KAAK,CAJlE,GAKHA,qBALG,GAMH,IANJ;MAOD;;MAED,OAAO,KAAKX,YAAL,CAAkBa,IAAlB,GAAyBhB,IAAhC;IACD;;;WAED,yBAAgBC,QAAhB,EAA0B;MACxB,IAAIG,KAAK,GAAG,KAAKa,MAAL,CAAYhB,QAAZ,CAAZ;;MAEA,IAAIG,KAAK,IAAI,IAAb,EAAmB;QACjBA,KAAK,GAAG,KAAKa,MAAL,CAAYhB,QAAZ,IAAwB,IAAIF,OAAJ,EAAhC;MACD;;MAED,OAAOK,KAAP;IACD;;;;;;AAGHf,OAAO,WAAP,GAAkBQ,aAAlB;;IAEME,O;EACJ,mBAAc;IAAA;;IACZR,eAAe,CAAC,IAAD,EAAO,OAAP,EAAgB,EAAhB,CAAf;EACD;;;;WAED,gBAAO;MACL,IAAI2B,YAAJ;;MAEA,OAAO,CAACA,YAAY,GAAG,KAAKC,KAAL,CAAW,CAAX,CAAhB,MAAmC,IAAnC,IAA2CD,YAAY,KAAK,KAAK,CAAjE,GACHA,YADG,GAEH,IAFJ;IAGD;;;WAED,aAAIZ,IAAJ,EAAU;MACR,IAAMc,KAAK,GAAG,KAAKD,KAAnB;MACAC,KAAK,CAACC,IAAN,CAAWf,IAAX;;MAEA,IAAIc,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;QACtB;MACD;;MAED,IAAIC,YAAY,GAAGH,KAAK,CAACE,MAAN,GAAe,CAAlC,CARQ,CAQ6B;;MAErC,OAAOC,YAAY,GAAG,CAAtB,EAAyB;QACvB,IAAMC,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACH,YAAY,GAAG,CAAhB,IAAqB,CAAhC,IAAqC,CAAzD;QACA,IAAMI,MAAM,GAAGP,KAAK,CAACI,WAAD,CAApB;;QAEA,IAAIG,MAAM,CAACpB,QAAP,IAAmBD,IAAI,CAACC,QAA5B,EAAsC;UACpC;QACD;;QAEDa,KAAK,CAACG,YAAD,CAAL,GAAsBI,MAAtB;QACAP,KAAK,CAACI,WAAD,CAAL,GAAqBlB,IAArB;QACAiB,YAAY,GAAGC,WAAf;MACD;IACF;;;WAED,gBAAO;MACL,IAAMJ,KAAK,GAAG,KAAKD,KAAnB;MACA,IAAMS,MAAM,GAAGR,KAAK,CAAC,CAAD,CAApB;MACA,IAAMS,WAAW,GAAGT,KAAK,CAACU,GAAN,EAApB,CAHK,CAG4B;;MAEjC,IAAIF,MAAM,IAAI,IAAV,IAAkBR,KAAK,CAACE,MAAN,KAAiB,CAAvC,EAA0C;QACxC,OAAOM,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuCA,MAAvC,GAAgD,IAAvD;MACD;;MAED,IAAIG,KAAK,GAAG,CAAZ;MACAX,KAAK,CAAC,CAAD,CAAL,GACES,WAAW,KAAK,IAAhB,IAAwBA,WAAW,KAAK,KAAK,CAA7C,GAAiDA,WAAjD,GAA+D,IADjE;MAEA,IAAMG,OAAO,GAAGZ,KAAK,CAAC,CAAD,CAArB;;MAEA,OAAO,IAAP,EAAa;QACX,IAAIa,SAAS,GAAG,IAAhB;QACA,IAAMC,eAAe,GAAG,CAACH,KAAK,GAAG,CAAT,IAAc,CAAtC;QACA,IAAMI,cAAc,GAAGD,eAAe,GAAG,CAAzC;QACA,IAAME,UAAU,GAAGhB,KAAK,CAACc,eAAD,CAAxB;QACA,IAAMG,SAAS,GAAGjB,KAAK,CAACe,cAAD,CAAvB,CALW,CAK8B;;QAEzC,IAAIE,SAAS,IAAI,IAAb,IAAqBA,SAAS,CAAC9B,QAAV,GAAqByB,OAAO,CAACzB,QAAtD,EAAgE;UAC9D0B,SAAS,GAAGE,cAAZ;QACD,CATU,CAST;QACF;;;QAEA,IACEC,UAAU,IAAI,IAAd,IACAA,UAAU,CAAC7B,QAAX,GAAsB,CAAC0B,SAAS,IAAI,IAAb,GAAoBD,OAApB,GAA8BK,SAA/B,EAA0C9B,QAFlE,EAGE;UACA0B,SAAS,GAAGC,eAAZ;QACD;;QAED,IAAID,SAAS,IAAI,IAAjB,EAAuB;UACrB;QACD;;QAEDb,KAAK,CAACW,KAAD,CAAL,GAAeX,KAAK,CAACa,SAAD,CAApB;QACAb,KAAK,CAACa,SAAD,CAAL,GAAmBD,OAAnB;QACAD,KAAK,GAAGE,SAAR;MACD;;MAED,OAAOL,MAAP;IACD"},"metadata":{},"sourceType":"script"}