{"ast":null,"code":"var _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nrequire(\"core-js/modules/es.function.name.js\");\n\nrequire(\"core-js/modules/es.array.is-array.js\");\n\nrequire(\"core-js/modules/es.array.for-each.js\");\n\nrequire(\"core-js/modules/es.object.to-string.js\");\n\nrequire(\"core-js/modules/web.dom-collections.for-each.js\");\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nrequire(\"core-js/modules/es.error.to-string.js\");\n\nrequire(\"core-js/modules/es.regexp.exec.js\");\n\nrequire(\"core-js/modules/es.string.replace.js\");\n\nrequire(\"core-js/modules/es.object.keys.js\");\n\nrequire(\"core-js/modules/es.string.split.js\");\n\nrequire(\"core-js/modules/es.string.substr.js\");\n\nrequire(\"core-js/modules/es.array.join.js\");\n\nrequire(\"core-js/modules/es.array.splice.js\");\n\n/* -*- Mode: js; js-indent-level: 2; -*- */\n\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nvar SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\n\nvar util = require(\"./util\"); // Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\n\n\nvar REGEX_NEWLINE = /(\\r?\\n)/; // Newline character code for charCodeAt() comparisons\n\nvar NEWLINE_CODE = 10; // Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\n\nvar isSourceNode = \"$$$isSourceNode$$$\";\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\n\nvar SourceNode = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n    _classCallCheck(this, SourceNode);\n\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n\n\n  _createClass(SourceNode, [{\n    key: \"add\",\n    value:\n    /**\n     * Add a chunk of generated JS to this source node.\n     *\n     * @param aChunk A string snippet of generated JS code, another instance of\n     *        SourceNode, or an array where each member is one of those things.\n     */\n    function add(aChunk) {\n      if (Array.isArray(aChunk)) {\n        aChunk.forEach(function (chunk) {\n          this.add(chunk);\n        }, this);\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        if (aChunk) {\n          this.children.push(aChunk);\n        }\n      } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n      }\n\n      return this;\n    }\n    /**\n     * Add a chunk of generated JS to the beginning of this source node.\n     *\n     * @param aChunk A string snippet of generated JS code, another instance of\n     *        SourceNode, or an array where each member is one of those things.\n     */\n\n  }, {\n    key: \"prepend\",\n    value: function prepend(aChunk) {\n      if (Array.isArray(aChunk)) {\n        for (var i = aChunk.length - 1; i >= 0; i--) {\n          this.prepend(aChunk[i]);\n        }\n      } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n        this.children.unshift(aChunk);\n      } else {\n        throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk);\n      }\n\n      return this;\n    }\n    /**\n     * Walk over the tree of JS snippets in this node and its children. The\n     * walking function is called once for each snippet of JS and is passed that\n     * snippet and the its original associated source's line/column location.\n     *\n     * @param aFn The traversal function.\n     */\n\n  }, {\n    key: \"walk\",\n    value: function walk(aFn) {\n      var chunk;\n\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        chunk = this.children[i];\n\n        if (chunk[isSourceNode]) {\n          chunk.walk(aFn);\n        } else if (chunk !== \"\") {\n          aFn(chunk, {\n            source: this.source,\n            line: this.line,\n            column: this.column,\n            name: this.name\n          });\n        }\n      }\n    }\n    /**\n     * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n     * each of `this.children`.\n     *\n     * @param aSep The separator.\n     */\n\n  }, {\n    key: \"join\",\n    value: function join(aSep) {\n      var newChildren;\n      var i;\n      var len = this.children.length;\n\n      if (len > 0) {\n        newChildren = [];\n\n        for (i = 0; i < len - 1; i++) {\n          newChildren.push(this.children[i]);\n          newChildren.push(aSep);\n        }\n\n        newChildren.push(this.children[i]);\n        this.children = newChildren;\n      }\n\n      return this;\n    }\n    /**\n     * Call String.prototype.replace on the very right-most source snippet. Useful\n     * for trimming whitespace from the end of a source node, etc.\n     *\n     * @param aPattern The pattern to replace.\n     * @param aReplacement The thing to replace the pattern with.\n     */\n\n  }, {\n    key: \"replaceRight\",\n    value: function replaceRight(aPattern, aReplacement) {\n      var lastChild = this.children[this.children.length - 1];\n\n      if (lastChild[isSourceNode]) {\n        lastChild.replaceRight(aPattern, aReplacement);\n      } else if (typeof lastChild === \"string\") {\n        this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n      } else {\n        this.children.push(\"\".replace(aPattern, aReplacement));\n      }\n\n      return this;\n    }\n    /**\n     * Set the source content for a source file. This will be added to the SourceMapGenerator\n     * in the sourcesContent field.\n     *\n     * @param aSourceFile The filename of the source file\n     * @param aSourceContent The content of the source file\n     */\n\n  }, {\n    key: \"setSourceContent\",\n    value: function setSourceContent(aSourceFile, aSourceContent) {\n      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n    }\n    /**\n     * Walk over the tree of SourceNodes. The walking function is called for each\n     * source file content and is passed the filename and source content.\n     *\n     * @param aFn The traversal function.\n     */\n\n  }, {\n    key: \"walkSourceContents\",\n    value: function walkSourceContents(aFn) {\n      for (var i = 0, len = this.children.length; i < len; i++) {\n        if (this.children[i][isSourceNode]) {\n          this.children[i].walkSourceContents(aFn);\n        }\n      }\n\n      var sources = Object.keys(this.sourceContents);\n\n      for (var _i = 0, _len = sources.length; _i < _len; _i++) {\n        aFn(util.fromSetString(sources[_i]), this.sourceContents[sources[_i]]);\n      }\n    }\n    /**\n     * Return the string representation of this source node. Walks over the tree\n     * and concatenates all the various snippets together to one string.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var str = \"\";\n      this.walk(function (chunk) {\n        str += chunk;\n      });\n      return str;\n    }\n    /**\n     * Returns the string representation of this source node along with a source\n     * map.\n     */\n\n  }, {\n    key: \"toStringWithSourceMap\",\n    value: function toStringWithSourceMap(aArgs) {\n      var generated = {\n        code: \"\",\n        line: 1,\n        column: 0\n      };\n      var map = new SourceMapGenerator(aArgs);\n      var sourceMappingActive = false;\n      var lastOriginalSource = null;\n      var lastOriginalLine = null;\n      var lastOriginalColumn = null;\n      var lastOriginalName = null;\n      this.walk(function (chunk, original) {\n        generated.code += chunk;\n\n        if (original.source !== null && original.line !== null && original.column !== null) {\n          if (lastOriginalSource !== original.source || lastOriginalLine !== original.line || lastOriginalColumn !== original.column || lastOriginalName !== original.name) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n\n          lastOriginalSource = original.source;\n          lastOriginalLine = original.line;\n          lastOriginalColumn = original.column;\n          lastOriginalName = original.name;\n          sourceMappingActive = true;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            generated: {\n              line: generated.line,\n              column: generated.column\n            }\n          });\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        }\n\n        for (var idx = 0, length = chunk.length; idx < length; idx++) {\n          if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n            generated.line++;\n            generated.column = 0; // Mappings end at eol\n\n            if (idx + 1 === length) {\n              lastOriginalSource = null;\n              sourceMappingActive = false;\n            } else if (sourceMappingActive) {\n              map.addMapping({\n                source: original.source,\n                original: {\n                  line: original.line,\n                  column: original.column\n                },\n                generated: {\n                  line: generated.line,\n                  column: generated.column\n                },\n                name: original.name\n              });\n            }\n          } else {\n            generated.column++;\n          }\n        }\n      });\n      this.walkSourceContents(function (sourceFile, sourceContent) {\n        map.setSourceContent(sourceFile, sourceContent);\n      });\n      return {\n        code: generated.code,\n        map: map\n      };\n    }\n  }], [{\n    key: \"fromStringWithSourceMap\",\n    value: function fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n      // The SourceNode we want to fill with the generated code\n      // and the SourceMap\n      var node = new SourceNode(); // All even indices of this array are one line of the generated code,\n      // while all odd indices are the newlines between two adjacent lines\n      // (since `REGEX_NEWLINE` captures its match).\n      // Processed fragments are accessed by calling `shiftNextLine`.\n\n      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n      var remainingLinesIndex = 0;\n\n      var shiftNextLine = function shiftNextLine() {\n        var lineContents = getNextLine(); // The last line of a file might not have a newline.\n\n        var newLine = getNextLine() || \"\";\n        return lineContents + newLine;\n\n        function getNextLine() {\n          return remainingLinesIndex < remainingLines.length ? remainingLines[remainingLinesIndex++] : undefined;\n        }\n      }; // We need to remember the position of \"remainingLines\"\n\n\n      var lastGeneratedLine = 1,\n          lastGeneratedColumn = 0; // The generate SourceNodes we need a code range.\n      // To extract it current and last mapping is used.\n      // Here we store the last mapping.\n\n      var lastMapping = null;\n      var nextLine;\n      aSourceMapConsumer.eachMapping(function (mapping) {\n        if (lastMapping !== null) {\n          // We add the code from \"lastMapping\" to \"mapping\":\n          // First check if there is a new line in between.\n          if (lastGeneratedLine < mapping.generatedLine) {\n            // Associate first line with \"lastMapping\"\n            addMappingWithCode(lastMapping, shiftNextLine());\n            lastGeneratedLine++;\n            lastGeneratedColumn = 0; // The remaining code is added without mapping\n          } else {\n            // There is no new line in between.\n            // Associate the code between \"lastGeneratedColumn\" and\n            // \"mapping.generatedColumn\" with \"lastMapping\"\n            nextLine = remainingLines[remainingLinesIndex] || \"\";\n            var code = nextLine.substr(0, mapping.generatedColumn - lastGeneratedColumn);\n            remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn - lastGeneratedColumn);\n            lastGeneratedColumn = mapping.generatedColumn;\n            addMappingWithCode(lastMapping, code); // No more remaining code, continue\n\n            lastMapping = mapping;\n            return;\n          }\n        } // We add the generated code until the first mapping\n        // to the SourceNode without any mapping.\n        // Each line is added as separate string.\n\n\n        while (lastGeneratedLine < mapping.generatedLine) {\n          node.add(shiftNextLine());\n          lastGeneratedLine++;\n        }\n\n        if (lastGeneratedColumn < mapping.generatedColumn) {\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          node.add(nextLine.substr(0, mapping.generatedColumn));\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n        }\n\n        lastMapping = mapping;\n      }, this); // We have processed all mappings.\n\n      if (remainingLinesIndex < remainingLines.length) {\n        if (lastMapping) {\n          // Associate the remaining code in the current line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n        } // and add the remaining lines without any mapping\n\n\n        node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n      } // Copy sourcesContent into SourceNode\n\n\n      aSourceMapConsumer.sources.forEach(function (sourceFile) {\n        var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n\n        if (content != null) {\n          if (aRelativePath != null) {\n            sourceFile = util.join(aRelativePath, sourceFile);\n          }\n\n          node.setSourceContent(sourceFile, content);\n        }\n      });\n      return node;\n\n      function addMappingWithCode(mapping, code) {\n        if (mapping === null || mapping.source === undefined) {\n          node.add(code);\n        } else {\n          var source = aRelativePath ? util.join(aRelativePath, mapping.source) : mapping.source;\n          node.add(new SourceNode(mapping.originalLine, mapping.originalColumn, source, code, mapping.name));\n        }\n      }\n    }\n  }]);\n\n  return SourceNode;\n}();\n\nexports.SourceNode = SourceNode;","map":{"version":3,"names":["SourceMapGenerator","require","util","REGEX_NEWLINE","NEWLINE_CODE","isSourceNode","SourceNode","aLine","aColumn","aSource","aChunks","aName","children","sourceContents","line","column","source","name","add","aChunk","Array","isArray","forEach","chunk","push","TypeError","i","length","prepend","unshift","aFn","len","walk","aSep","newChildren","aPattern","aReplacement","lastChild","replaceRight","replace","aSourceFile","aSourceContent","toSetString","walkSourceContents","sources","Object","keys","fromSetString","str","aArgs","generated","code","map","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","original","addMapping","idx","charCodeAt","sourceFile","sourceContent","setSourceContent","aGeneratedCode","aSourceMapConsumer","aRelativePath","node","remainingLines","split","remainingLinesIndex","shiftNextLine","lineContents","getNextLine","newLine","undefined","lastGeneratedLine","lastGeneratedColumn","lastMapping","nextLine","eachMapping","mapping","generatedLine","addMappingWithCode","substr","generatedColumn","splice","join","content","sourceContentFor","originalLine","originalColumn","exports"],"sources":["D:/Work/Project/LMS/lms/node_modules/terser/node_modules/source-map/lib/source-node.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}