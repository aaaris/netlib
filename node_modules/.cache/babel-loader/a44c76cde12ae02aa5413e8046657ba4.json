{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./Resolver\")} Resolver */\n\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nvar _classCallCheck = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/classCallCheck.js\")[\"default\"];\n\nvar _createClass = require(\"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/createClass.js\")[\"default\"];\n\nmodule.exports = /*#__PURE__*/function () {\n  /**\n   * @param {string | ResolveStepHook} source source\n   * @param {string | ResolveStepHook} target target\n   */\n  function FileExistsPlugin(source, target) {\n    _classCallCheck(this, FileExistsPlugin);\n\n    this.source = source;\n    this.target = target;\n  }\n  /**\n   * @param {Resolver} resolver the resolver\n   * @returns {void}\n   */\n\n\n  _createClass(FileExistsPlugin, [{\n    key: \"apply\",\n    value: function apply(resolver) {\n      var target = resolver.ensureHook(this.target);\n      var fs = resolver.fileSystem;\n      resolver.getHook(this.source).tapAsync(\"FileExistsPlugin\", function (request, resolveContext, callback) {\n        var file = request.path;\n        if (!file) return callback();\n        fs.stat(file, function (err, stat) {\n          if (err || !stat) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(file);\n            if (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n            return callback();\n          }\n\n          if (!stat.isFile()) {\n            if (resolveContext.missingDependencies) resolveContext.missingDependencies.add(file);\n            if (resolveContext.log) resolveContext.log(file + \" is not a file\");\n            return callback();\n          }\n\n          if (resolveContext.fileDependencies) resolveContext.fileDependencies.add(file);\n          resolver.doResolve(target, request, \"existing file: \" + file, resolveContext, callback);\n        });\n      });\n    }\n  }]);\n\n  return FileExistsPlugin;\n}();","map":{"version":3,"names":["module","exports","source","target","resolver","ensureHook","fs","fileSystem","getHook","tapAsync","request","resolveContext","callback","file","path","stat","err","missingDependencies","add","log","isFile","fileDependencies","doResolve"],"sources":["D:/Work/Project/LMS/lms/node_modules/enhanced-resolve/lib/FileExistsPlugin.js"],"sourcesContent":["/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n\"use strict\";\n\n/** @typedef {import(\"./Resolver\")} Resolver */\n/** @typedef {import(\"./Resolver\").ResolveStepHook} ResolveStepHook */\n\nmodule.exports = class FileExistsPlugin {\n\t/**\n\t * @param {string | ResolveStepHook} source source\n\t * @param {string | ResolveStepHook} target target\n\t */\n\tconstructor(source, target) {\n\t\tthis.source = source;\n\t\tthis.target = target;\n\t}\n\n\t/**\n\t * @param {Resolver} resolver the resolver\n\t * @returns {void}\n\t */\n\tapply(resolver) {\n\t\tconst target = resolver.ensureHook(this.target);\n\t\tconst fs = resolver.fileSystem;\n\t\tresolver\n\t\t\t.getHook(this.source)\n\t\t\t.tapAsync(\"FileExistsPlugin\", (request, resolveContext, callback) => {\n\t\t\t\tconst file = request.path;\n\t\t\t\tif (!file) return callback();\n\t\t\t\tfs.stat(file, (err, stat) => {\n\t\t\t\t\tif (err || !stat) {\n\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\tresolveContext.missingDependencies.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" doesn't exist\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (!stat.isFile()) {\n\t\t\t\t\t\tif (resolveContext.missingDependencies)\n\t\t\t\t\t\t\tresolveContext.missingDependencies.add(file);\n\t\t\t\t\t\tif (resolveContext.log) resolveContext.log(file + \" is not a file\");\n\t\t\t\t\t\treturn callback();\n\t\t\t\t\t}\n\t\t\t\t\tif (resolveContext.fileDependencies)\n\t\t\t\t\t\tresolveContext.fileDependencies.add(file);\n\t\t\t\t\tresolver.doResolve(\n\t\t\t\t\t\ttarget,\n\t\t\t\t\t\trequest,\n\t\t\t\t\t\t\"existing file: \" + file,\n\t\t\t\t\t\tresolveContext,\n\t\t\t\t\t\tcallback\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t}\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;;;;;AAEAA,MAAM,CAACC,OAAP;EACC;AACD;AACA;AACA;EACC,0BAAYC,MAAZ,EAAoBC,MAApB,EAA4B;IAAA;;IAC3B,KAAKD,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;EACA;EAED;AACD;AACA;AACA;;;EAbA;IAAA;IAAA,OAcC,eAAMC,QAAN,EAAgB;MACf,IAAMD,MAAM,GAAGC,QAAQ,CAACC,UAAT,CAAoB,KAAKF,MAAzB,CAAf;MACA,IAAMG,EAAE,GAAGF,QAAQ,CAACG,UAApB;MACAH,QAAQ,CACNI,OADF,CACU,KAAKN,MADf,EAEEO,QAFF,CAEW,kBAFX,EAE+B,UAACC,OAAD,EAAUC,cAAV,EAA0BC,QAA1B,EAAuC;QACpE,IAAMC,IAAI,GAAGH,OAAO,CAACI,IAArB;QACA,IAAI,CAACD,IAAL,EAAW,OAAOD,QAAQ,EAAf;QACXN,EAAE,CAACS,IAAH,CAAQF,IAAR,EAAc,UAACG,GAAD,EAAMD,IAAN,EAAe;UAC5B,IAAIC,GAAG,IAAI,CAACD,IAAZ,EAAkB;YACjB,IAAIJ,cAAc,CAACM,mBAAnB,EACCN,cAAc,CAACM,mBAAf,CAAmCC,GAAnC,CAAuCL,IAAvC;YACD,IAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;YACxB,OAAOD,QAAQ,EAAf;UACA;;UACD,IAAI,CAACG,IAAI,CAACK,MAAL,EAAL,EAAoB;YACnB,IAAIT,cAAc,CAACM,mBAAnB,EACCN,cAAc,CAACM,mBAAf,CAAmCC,GAAnC,CAAuCL,IAAvC;YACD,IAAIF,cAAc,CAACQ,GAAnB,EAAwBR,cAAc,CAACQ,GAAf,CAAmBN,IAAI,GAAG,gBAA1B;YACxB,OAAOD,QAAQ,EAAf;UACA;;UACD,IAAID,cAAc,CAACU,gBAAnB,EACCV,cAAc,CAACU,gBAAf,CAAgCH,GAAhC,CAAoCL,IAApC;UACDT,QAAQ,CAACkB,SAAT,CACCnB,MADD,EAECO,OAFD,EAGC,oBAAoBG,IAHrB,EAICF,cAJD,EAKCC,QALD;QAOA,CAtBD;MAuBA,CA5BF;IA6BA;EA9CF;;EAAA;AAAA"},"metadata":{},"sourceType":"script"}