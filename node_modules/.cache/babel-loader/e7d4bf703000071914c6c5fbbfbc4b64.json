{"ast":null,"code":"import _asyncToGenerator from \"D:/Work/Project/LMS/lms/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport Vue from \"vue\";\nimport Vuex from \"vuex\";\nVue.use(Vuex); // 定义会话状态\n\nvar state = {\n  // access_token\n  token: \"\",\n  // 用户信息\n  userinfo: {// user_id: 0,\n    // user_name: \"aris\",\n    // user_level: 0,\n  },\n  // 菜单导航\n  menu_data: [],\n  //  加载动态路由标志\n  isLoadRoute: false\n}; // 定义行为方法\n\nvar mutations = {\n  // 设置授权密钥\n  setToken: function setToken(state, token) {\n    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              state.token = token; // 更新userinfo\n              // const { data: res } = await this.$http.get(\n              //   \"/user/\" + +\"?access_token=\" + token\n              // );\n              // this.user = res.data;\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  },\n  // 设置用户信息\n  setUserInfo: function setUserInfo(state, data) {\n    state.userinfo = JSON.parse(data);\n  },\n  //  设置菜单导航\n  setMeunData: function setMeunData(state, data) {\n    state.menu_data = data;\n  },\n  //   设置加载路由标志\n  setLoadRoute: function setLoadRoute(state, data) {\n    state.isLoadRoute = data;\n  },\n  //   清空会话状态\n  clearState: function clearState(state) {\n    state = {\n      token: \"\",\n      userinfo: {\n        user_id: 0,\n        user_name: \"\",\n        user_level: 0\n      },\n      menu_data: [],\n      isLoadRoute: false\n    };\n  }\n}; // 定义获取加工方法\n\nvar getters = {\n  // 获取用户登录信息\n  getLoginState: function getLoginState(state) {\n    return state.token != \"\";\n  },\n  // 获取用户角色\n  getUserLevel: function getUserLevel(state) {\n    var data;\n\n    if (state.userState == 0) {\n      data = \"用户\";\n    } else {\n      data = state.userState + \"管理员\";\n    }\n\n    return data;\n  },\n  //   获取用户授权密钥\n  getToken: function getToken(state) {\n    return state.token;\n  }\n};\nexport default new Vuex.Store({\n  state: state,\n  mutations: mutations,\n  getters: getters\n});","map":{"version":3,"names":["Vue","Vuex","use","state","token","userinfo","menu_data","isLoadRoute","mutations","setToken","setUserInfo","data","JSON","parse","setMeunData","setLoadRoute","clearState","user_id","user_name","user_level","getters","getLoginState","getUserLevel","userState","getToken","Store"],"sources":["D:/Work/Project/LMS/lms/src/store/store.js"],"sourcesContent":["import Vue from \"vue\";\r\nimport Vuex from \"vuex\";\r\n\r\nVue.use(Vuex);\r\n\r\n// 定义会话状态\r\nconst state = {\r\n  // access_token\r\n  token: \"\",\r\n  // 用户信息\r\n  userinfo: {\r\n    // user_id: 0,\r\n    // user_name: \"aris\",\r\n    // user_level: 0,\r\n  },\r\n  // 菜单导航\r\n  menu_data: [],\r\n  //  加载动态路由标志\r\n  isLoadRoute: false,\r\n};\r\n\r\n// 定义行为方法\r\nconst mutations = {\r\n  // 设置授权密钥\r\n  async setToken(state, token) {\r\n    state.token = token;\r\n    // 更新userinfo\r\n    // const { data: res } = await this.$http.get(\r\n    //   \"/user/\" + +\"?access_token=\" + token\r\n    // );\r\n    // this.user = res.data;\r\n  },\r\n  // 设置用户信息\r\n  setUserInfo(state, data) {\r\n    state.userinfo = JSON.parse(data);\r\n  },\r\n  //  设置菜单导航\r\n  setMeunData(state, data) {\r\n    state.menu_data = data;\r\n  },\r\n  //   设置加载路由标志\r\n  setLoadRoute(state, data) {\r\n    state.isLoadRoute = data;\r\n  },\r\n  //   清空会话状态\r\n  clearState(state) {\r\n    state = {\r\n      token: \"\",\r\n      userinfo: {\r\n        user_id: 0,\r\n        user_name: \"\",\r\n        user_level: 0,\r\n      },\r\n      menu_data: [],\r\n      isLoadRoute: false,\r\n    };\r\n  },\r\n};\r\n\r\n// 定义获取加工方法\r\nconst getters = {\r\n  // 获取用户登录信息\r\n  getLoginState(state) {\r\n    return state.token != \"\";\r\n  },\r\n  // 获取用户角色\r\n  getUserLevel(state) {\r\n    let data;\r\n    if (state.userState == 0) {\r\n      data = \"用户\";\r\n    } else {\r\n      data = state.userState + \"管理员\";\r\n    }\r\n    return data;\r\n  },\r\n  //   获取用户授权密钥\r\n  getToken(state) {\r\n    return state.token;\r\n  },\r\n};\r\n\r\nexport default new Vuex.Store({\r\n  state,\r\n  mutations,\r\n  getters,\r\n});\r\n"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEAD,GAAG,CAACE,GAAJ,CAAQD,IAAR,E,CAEA;;AACA,IAAME,KAAK,GAAG;EACZ;EACAC,KAAK,EAAE,EAFK;EAGZ;EACAC,QAAQ,EAAE,CACR;IACA;IACA;EAHQ,CAJE;EASZ;EACAC,SAAS,EAAE,EAVC;EAWZ;EACAC,WAAW,EAAE;AAZD,CAAd,C,CAeA;;AACA,IAAMC,SAAS,GAAG;EAChB;EACMC,QAFU,oBAEDN,KAFC,EAEMC,KAFN,EAEa;IAAA;MAAA;QAAA;UAAA;YAAA;cAC3BD,KAAK,CAACC,KAAN,GAAcA,KAAd,CAD2B,CAE3B;cACA;cACA;cACA;cACA;;YAN2B;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAO5B,CATe;EAUhB;EACAM,WAXgB,uBAWJP,KAXI,EAWGQ,IAXH,EAWS;IACvBR,KAAK,CAACE,QAAN,GAAiBO,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAjB;EACD,CAbe;EAchB;EACAG,WAfgB,uBAeJX,KAfI,EAeGQ,IAfH,EAeS;IACvBR,KAAK,CAACG,SAAN,GAAkBK,IAAlB;EACD,CAjBe;EAkBhB;EACAI,YAnBgB,wBAmBHZ,KAnBG,EAmBIQ,IAnBJ,EAmBU;IACxBR,KAAK,CAACI,WAAN,GAAoBI,IAApB;EACD,CArBe;EAsBhB;EACAK,UAvBgB,sBAuBLb,KAvBK,EAuBE;IAChBA,KAAK,GAAG;MACNC,KAAK,EAAE,EADD;MAENC,QAAQ,EAAE;QACRY,OAAO,EAAE,CADD;QAERC,SAAS,EAAE,EAFH;QAGRC,UAAU,EAAE;MAHJ,CAFJ;MAONb,SAAS,EAAE,EAPL;MAQNC,WAAW,EAAE;IARP,CAAR;EAUD;AAlCe,CAAlB,C,CAqCA;;AACA,IAAMa,OAAO,GAAG;EACd;EACAC,aAFc,yBAEAlB,KAFA,EAEO;IACnB,OAAOA,KAAK,CAACC,KAAN,IAAe,EAAtB;EACD,CAJa;EAKd;EACAkB,YANc,wBAMDnB,KANC,EAMM;IAClB,IAAIQ,IAAJ;;IACA,IAAIR,KAAK,CAACoB,SAAN,IAAmB,CAAvB,EAA0B;MACxBZ,IAAI,GAAG,IAAP;IACD,CAFD,MAEO;MACLA,IAAI,GAAGR,KAAK,CAACoB,SAAN,GAAkB,KAAzB;IACD;;IACD,OAAOZ,IAAP;EACD,CAda;EAed;EACAa,QAhBc,oBAgBLrB,KAhBK,EAgBE;IACd,OAAOA,KAAK,CAACC,KAAb;EACD;AAlBa,CAAhB;AAqBA,eAAe,IAAIH,IAAI,CAACwB,KAAT,CAAe;EAC5BtB,KAAK,EAALA,KAD4B;EAE5BK,SAAS,EAATA,SAF4B;EAG5BY,OAAO,EAAPA;AAH4B,CAAf,CAAf"},"metadata":{},"sourceType":"module"}